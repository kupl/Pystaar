[
    {
        "path": "example/crowdquake/gateway/stat/src/gateway/core/stat.py",
        "line": 7,
        "func_name": "Stat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "example/crowdquake/gateway/stat/src/gateway/core/stat.py",
        "line": 8,
        "func_name": "Stat.__init__",
        "type_comments": [
            {
                "type": "(str, int, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(List[int], int, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(float, int, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "example/crowdquake/gateway/stat/src/gateway/core/stat.py",
        "line": 30,
        "func_name": "window_max_latency",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "example/crowdquake/gateway/stat/test/Stat__init___neg_test.py",
        "line": 1,
        "func_name": "test_neg_1",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "example/crowdquake/gateway/stat/test/Stat__init___neg_test.py",
        "line": 8,
        "func_name": "test_neg_2",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "example/crowdquake/gateway/stat/test/Stat__init___neg_test.py",
        "line": 15,
        "func_name": "test_neg_3",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 180,
        "func_name": "ListType.__init__",
        "type_comments": [
            {
                "type": "(pyannotate_runtime.collect_types.TentativeType) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 184,
        "func_name": "ListType.__repr__",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 374,
        "func_name": "TentativeType.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 411,
        "func_name": "TentativeType.add",
        "type_comments": [
            {
                "type": "(type) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 454,
        "func_name": "TentativeType.__repr__",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 492,
        "func_name": "name_from_type",
        "type_comments": [
            {
                "type": "(pyannotate_runtime.collect_types.ListType) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(type) -> str",
                "samples": 7
            }
        ],
        "samples": 8
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 522,
        "func_name": "get_function_name_from_frame",
        "type_comments": [
            {
                "type": "(frame) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 576,
        "func_name": "resolve_type",
        "type_comments": [
            {
                "type": "(float) -> type",
                "samples": 1
            },
            {
                "type": "(example.crowdquake.gateway.stat.src.gateway.core.stat.Stat) -> type",
                "samples": 3
            },
            {
                "type": "(List[int]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str) -> type",
                "samples": 1
            },
            {
                "type": "(int) -> type",
                "samples": 1
            }
        ],
        "samples": 7
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 681,
        "func_name": "prep_select_args",
        "type_comments": [
            {
                "type": "(inspect.ArgInfo, List[str], Dict) -> Tuple[Dict[str => type]/None]",
                "samples": 3
            },
            {
                "type": "(inspect.ArgInfo, List[str], Dict) -> Tuple[Dict[str => Union[pyannotate_runtime.collect_types.ListType/type]]/None]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 943,
        "func_name": "traceback_manager",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 1165,
        "func_name": "getmembers",
        "type_comments": [
            {
                "type": "(float, None) -> List[Union[Tuple[str/builtin_function_or_method]/Tuple[str/method-wrapper]]]",
                "samples": 1
            },
            {
                "type": "(List[int], None) -> List[Union[Tuple[str/builtin_function_or_method]/Tuple[str/method-wrapper]/Tuple[str/type]]]",
                "samples": 1
            },
            {
                "type": "(str, None) -> List[Union[Tuple[str/method-wrapper]/Tuple[str/type]]]",
                "samples": 1
            },
            {
                "type": "(example.crowdquake.gateway.stat.src.gateway.core.stat.Stat, None) -> List[Union[Tuple[str/Dict[str => int]]/Tuple[str/builtin_function_or_method]/Tuple[str/method-wrapper]/Tuple[str/type]]]",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 1218,
        "func_name": "get_all_member",
        "type_comments": [
            {
                "type": "(str, float, List, Dict) -> Dict",
                "samples": 1
            },
            {
                "type": "(str, List[int], List, Dict) -> Dict",
                "samples": 1
            },
            {
                "type": "(str, str, List, Dict) -> Dict",
                "samples": 1
            },
            {
                "type": "(str, example.crowdquake.gateway.stat.src.gateway.core.stat.Stat, List, Dict) -> Dict",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 1299,
        "func_name": "add_info",
        "type_comments": [
            {
                "type": "(Dict[str => Union[Dict[str => Union[List[str]/int/str]]/List[int]]], List[Dict[str => Union[Dict[str => Union[List[str]/int/str]]/List[int]]]]) -> List[Dict[str => Union[Dict[str => Union[List[str]/int/str]]/List[int]]]]",
                "samples": 2
            },
            {
                "type": "(Dict[str => Union[Dict[str => Union[List[str]/int/str]]/List[int]]], List) -> List[Dict[str => Union[Dict[str => Union[List[str]/int/str]]/List[int]]]]",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/collect_types.py",
        "line": 1384,
        "func_name": "default_filter_filename",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 8,
        "func_name": "ExtractConstant.__init__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 11,
        "func_name": "ExtractConstant.visit_Constant",
        "type_comments": [
            {
                "type": "(ast.Constant) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 36
            }
        ],
        "samples": 36
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 39,
        "func_name": "ExtractConstant.visit_FunctionDef",
        "type_comments": [
            {
                "type": "(ast.FunctionDef) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 55,
        "func_name": "ExtractConstant.get_constant",
        "type_comments": [
            {
                "type": "(ast.Module) -> Dict[str => Union[List[float]/List[int]/List[str]]]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 65,
        "func_name": "ExtractRaise.__init__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 110,
        "func_name": "ExtractRaise.generic_visit",
        "type_comments": [
            {
                "type": "(ast.arguments) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "(ast.alias) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(ast.Store) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(ast.Load) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(ast.Constant) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            },
            {
                "type": "(ast.FunctionDef) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 3
            },
            {
                "type": "(ast.ImportFrom) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 3
            },
            {
                "type": "(ast.Module) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.Assign) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 3
            },
            {
                "type": "(ast.Name) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 9
            },
            {
                "type": "(ast.Call) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 6
            },
            {
                "type": "(ast.Expr) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 2
            },
            {
                "type": "(ast.Attribute) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 4
            }
        ],
        "samples": 61
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 119,
        "func_name": "ExtractRaise.visit_FunctionDef",
        "type_comments": [
            {
                "type": "(ast.FunctionDef) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "pyannotate/pyannotate_runtime/extract_info.py",
        "line": 135,
        "func_name": "ExtractRaise.get_raise_info",
        "type_comments": [
            {
                "type": "(ast.Module) -> Tuple[List/List]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 7,
        "func_name": "VarAnalysis.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 15,
        "func_name": "VarAnalysis.visit_Subscript",
        "type_comments": [
            {
                "type": "(ast.Subscript) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 41,
        "func_name": "VarAnalysis.visit_Attribute",
        "type_comments": [
            {
                "type": "(ast.Attribute) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 51
            }
        ],
        "samples": 51
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 49,
        "func_name": "VarAnalysis.visit_Name",
        "type_comments": [
            {
                "type": "(ast.Name) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 55,
        "func_name": "VarAnalysis.generic_visit",
        "type_comments": [
            {
                "type": "(ast.alias) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(ast.arg) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(ast.Load) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            },
            {
                "type": "(ast.Constant) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 11
            },
            {
                "type": "(ast.Store) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(ast.Name) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 14
            },
            {
                "type": "(ast.Compare) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(ast.Call) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(ast.Attribute) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(ast.Attribute) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 5
            },
            {
                "type": "(ast.Call) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 3
            },
            {
                "type": "(ast.If) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.Expr) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.ImportFrom) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 4
            },
            {
                "type": "(ast.Import) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 2
            },
            {
                "type": "(ast.Module) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.ClassDef) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.FunctionDef) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.arguments) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 2
            },
            {
                "type": "(ast.arg) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 7
            },
            {
                "type": "(ast.Name) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 14
            },
            {
                "type": "(ast.Subscript) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(ast.Assign) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 6
            }
        ],
        "samples": 82
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 98,
        "func_name": "VarAnalysis.get_usage_var",
        "type_comments": [
            {
                "type": "() -> Set[str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 101,
        "func_name": "get_attr",
        "type_comments": [
            {
                "type": "(ast.Name, str, Set) -> Set[str]",
                "samples": 9
            },
            {
                "type": "(ast.Name, str, Set) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 9
            },
            {
                "type": "(ast.Attribute, str, Set[str]) -> Set[str]",
                "samples": 3
            }
        ],
        "samples": 12
    },
    {
        "path": "pyannotate/pyannotate_runtime/var_analysis.py",
        "line": 122,
        "func_name": "VarAnalysis.get_var_info",
        "type_comments": [
            {
                "type": "(ast.Module, int) -> Tuple[Set[str]/Dict]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/__editable___pyannotate_1_2_0_finder.py",
        "line": 15,
        "func_name": "find_spec",
        "type_comments": [
            {
                "type": "(str, List[str], None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_argcomplete.py",
        "line": 73,
        "func_name": "FastFilesCompleter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_argcomplete.py",
        "line": 113,
        "func_name": "try_argcomplete",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.MyOptionParser::argparse.ArgumentParser) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 67,
        "func_name": "Code.__init__",
        "type_comments": [
            {
                "type": "(code) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 60
            }
        ],
        "samples": 60
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 70,
        "func_name": "from_function",
        "type_comments": [
            {
                "type": "(function) -> _pytest._code.code.Code::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 80,
        "func_name": "firstlineno",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 21
            }
        ],
        "samples": 21
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 88,
        "func_name": "path",
        "type_comments": [
            {
                "type": "() -> pathlib.PosixPath",
                "samples": 57
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 105,
        "func_name": "fullsource",
        "type_comments": [
            {
                "type": "() -> _pytest._code.source.Source::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 137,
        "func_name": "Frame.__init__",
        "type_comments": [
            {
                "type": "(frame) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 62
            }
        ],
        "samples": 62
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 144,
        "func_name": "f_globals",
        "type_comments": [
            {
                "type": "() -> Dict[str => Optional[Union[_frozen_importlib.ModuleSpec/_frozen_importlib_external.SourceFileLoader/str]]]",
                "samples": 9
            },
            {
                "type": "() -> Dict[str => Optional[Union[_frozen_importlib.ModuleSpec/_pytest.assertion.rewrite.AssertionRewritingHook::importlib.abc.MetaPathFinder/str]]]",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 148,
        "func_name": "f_locals",
        "type_comments": [
            {
                "type": "() -> Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/float/int]]]",
                "samples": 15
            },
            {
                "type": "() -> Dict[str => Optional[Union[List[int]/example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int]]]",
                "samples": 15
            },
            {
                "type": "() -> Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int/str]]]",
                "samples": 15
            },
            {
                "type": "() -> Dict[str => type]",
                "samples": 15
            }
        ],
        "samples": 15
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 152,
        "func_name": "code",
        "type_comments": [
            {
                "type": "() -> _pytest._code.code.Code::object",
                "samples": 59
            }
        ],
        "samples": 59
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 198,
        "func_name": "TracebackEntry.__init__",
        "type_comments": [
            {
                "type": "(traceback, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 56
            }
        ],
        "samples": 56
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 211,
        "func_name": "lineno",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 21
            }
        ],
        "samples": 21
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 215,
        "func_name": "frame",
        "type_comments": [
            {
                "type": "() -> _pytest._code.code.Frame::object",
                "samples": 62
            }
        ],
        "samples": 62
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 233,
        "func_name": "path",
        "type_comments": [
            {
                "type": "() -> pathlib.PosixPath",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 238,
        "func_name": "locals",
        "type_comments": [
            {
                "type": "() -> Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/float/int]]]",
                "samples": 6
            },
            {
                "type": "() -> Dict[str => Optional[Union[List[int]/example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int]]]",
                "samples": 6
            },
            {
                "type": "() -> Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int/str]]]",
                "samples": 6
            },
            {
                "type": "() -> Dict[str => type]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 243,
        "func_name": "TracebackEntry.getfirstlinesource",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 246,
        "func_name": "TracebackEntry.getsource",
        "type_comments": [
            {
                "type": "(Dict) -> _pytest._code.source.Source::object",
                "samples": 3
            },
            {
                "type": "(Dict[pathlib.PosixPath => ast.Module]) -> _pytest._code.source.Source::object",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 274,
        "func_name": "TracebackEntry.ishidden",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> bool",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 319,
        "func_name": "name",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 328,
        "func_name": "Traceback.__init__",
        "type_comments": [
            {
                "type": "(traceback) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(filter) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 335,
        "func_name": "f",
        "type_comments": [
            {
                "type": "(traceback) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 57
            },
            {
                "type": "(traceback) -> Iterator[_pytest._code.code.TracebackEntry::object]",
                "samples": 57
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 345,
        "func_name": "Traceback.cut",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, None, int, None) -> _pytest._code.code.Traceback::list",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 389,
        "func_name": "Traceback.__getitem__",
        "type_comments": [
            {
                "type": "(int) -> _pytest._code.code.TracebackEntry::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 397,
        "func_name": "Traceback.filter",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.Traceback::list",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 456,
        "func_name": "ExceptionInfo.__init__",
        "type_comments": [
            {
                "type": "(Tuple[type/TypeError/traceback], str, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 498,
        "func_name": "from_exc_info",
        "type_comments": [
            {
                "type": "(Tuple[type/TypeError/traceback], None) -> _pytest._code.code.ExceptionInfo::typing.Generic",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 515,
        "func_name": "from_current",
        "type_comments": [
            {
                "type": "(None) -> _pytest._code.code.ExceptionInfo::typing.Generic",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 547,
        "func_name": "type",
        "type_comments": [
            {
                "type": "() -> type",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 555,
        "func_name": "value",
        "type_comments": [
            {
                "type": "() -> TypeError",
                "samples": 36
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 563,
        "func_name": "tb",
        "type_comments": [
            {
                "type": "() -> traceback",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 579,
        "func_name": "traceback",
        "type_comments": [
            {
                "type": "() -> _pytest._code.code.Traceback::list",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 597,
        "func_name": "ExceptionInfo.exconly",
        "type_comments": [
            {
                "type": "(bool) -> str",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 622,
        "func_name": "ExceptionInfo._getreprcrash",
        "type_comments": [
            {
                "type": "() -> _pytest._code.code.ReprFileLocation::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 633,
        "func_name": "ExceptionInfo.getrepr",
        "type_comments": [
            {
                "type": "(bool, str, bool, method, bool, bool, bool) -> _pytest._code.code.ExceptionChainRepr::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 753,
        "func_name": "FormattedExcinfo._getentrysource",
        "type_comments": [
            {
                "type": "(_pytest._code.code.TracebackEntry::object) -> _pytest._code.source.Source::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 767,
        "func_name": "FormattedExcinfo.get_source",
        "type_comments": [
            {
                "type": "(_pytest._code.source.Source::object, int, _pytest._code.code.ExceptionInfo::typing.Generic, bool) -> List[str]",
                "samples": 3
            },
            {
                "type": "(_pytest._code.source.Source::object, int, None, bool) -> List[str]",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 797,
        "func_name": "FormattedExcinfo.get_exconly",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic, int, bool) -> List[str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 814,
        "func_name": "FormattedExcinfo.repr_locals",
        "type_comments": [
            {
                "type": "(Dict[str => type]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/float/int]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Optional[Union[example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int/str]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Optional[Union[List[int]/example.crowdquake.gateway.stat.src.gateway.core.stat.Stat/int]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 840,
        "func_name": "FormattedExcinfo.repr_traceback_entry",
        "type_comments": [
            {
                "type": "(_pytest._code.code.TracebackEntry::object, _pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.ReprEntry::object",
                "samples": 3
            },
            {
                "type": "(_pytest._code.code.TracebackEntry::object, None) -> _pytest._code.code.ReprEntry::object",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 880,
        "func_name": "FormattedExcinfo._makepath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> str",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 890,
        "func_name": "FormattedExcinfo.repr_traceback",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.ReprTraceback::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 961,
        "func_name": "FormattedExcinfo.repr_excinfo",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.ExceptionChainRepr::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1046,
        "func_name": "ExceptionRepr.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1056,
        "func_name": "ExceptionChainRepr.__init__",
        "type_comments": [
            {
                "type": "(List[Tuple[_pytest._code.code.ReprTraceback::object/_pytest._code.code.ReprFileLocation::object/None]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1070,
        "func_name": "ExceptionChainRepr.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1097,
        "func_name": "ReprTraceback.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1141,
        "func_name": "ReprEntry._write_entry_lines",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1185,
        "func_name": "ReprEntry.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1219,
        "func_name": "ReprFileLocation.__post_init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1222,
        "func_name": "ReprFileLocation.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/code.py",
        "line": 1265,
        "func_name": "getfslineno",
        "type_comments": [
            {
                "type": "(function) -> Tuple[pathlib.PosixPath/int]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 23,
        "func_name": "Source.__init__",
        "type_comments": [
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 56,
        "func_name": "Source.__getitem__",
        "type_comments": [
            {
                "type": "(slice) -> _pytest._code.source.Source::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 104,
        "func_name": "Source.deindent",
        "type_comments": [
            {
                "type": "() -> _pytest._code.source.Source::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 110,
        "func_name": "Source.__str__",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 119,
        "func_name": "findsource",
        "type_comments": [
            {
                "type": "(code) -> Tuple[_pytest._code.source.Source::object/int]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 129,
        "func_name": "getrawcode",
        "type_comments": [
            {
                "type": "(function, bool) -> code",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 142,
        "func_name": "deindent",
        "type_comments": [
            {
                "type": "(List[str]) -> List[str]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 146,
        "func_name": "get_statement_startend2",
        "type_comments": [
            {
                "type": "(int, ast.Module) -> Tuple[int/int]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_code/source.py",
        "line": 173,
        "func_name": "getstatementrange_ast",
        "type_comments": [
            {
                "type": "(int, _pytest._code.source.Source::object, bool, None) -> Tuple[ast.Module/int/int]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 16,
        "func_name": "get_terminal_width",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 26,
        "func_name": "should_do_markup",
        "type_comments": [
            {
                "type": "(_io.StringIO) -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 65,
        "func_name": "TerminalWriter.__init__",
        "type_comments": [
            {
                "type": "(_io.StringIO) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 82,
        "func_name": "fullwidth",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 92,
        "func_name": "width_of_current_line",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 97,
        "func_name": "TerminalWriter.markup",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 107,
        "func_name": "TerminalWriter.sep",
        "type_comments": [
            {
                "type": "(str, str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(str, str, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 144,
        "func_name": "TerminalWriter.write",
        "type_comments": [
            {
                "type": "(str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 169,
        "func_name": "TerminalWriter.line",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 34
            }
        ],
        "samples": 34
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 173,
        "func_name": "TerminalWriter.flush",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 176,
        "func_name": "TerminalWriter._write_source",
        "type_comments": [
            {
                "type": "(List[str], List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/terminalwriter.py",
        "line": 196,
        "func_name": "TerminalWriter._highlight",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/wcwidth.py",
        "line": 5,
        "func_name": "wcwidth",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 37
            }
        ],
        "samples": 37
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_io/wcwidth.py",
        "line": 44,
        "func_name": "wcswidth",
        "type_comments": [
            {
                "type": "(str) -> int",
                "samples": 13
            }
        ],
        "samples": 13
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/_py/path.py",
        "line": 278,
        "func_name": "LocalPath.__init__",
        "type_comments": [
            {
                "type": "(str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(pathlib.PosixPath, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            }
        ],
        "samples": 15
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 22,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 76,
        "func_name": "DummyRewriteHook.mark_rewrite",
        "type_comments": [
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 32
            }
        ],
        "samples": 32
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 83,
        "func_name": "AssertionState.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 89,
        "func_name": "install_importhook",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> _pytest.assertion.rewrite.AssertionRewritingHook::importlib.abc.MetaPathFinder",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 96,
        "func_name": "undo",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 105,
        "func_name": "pytest_collection",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 115,
        "func_name": "pytest_runtest_protocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/__init__.py",
        "line": 171,
        "func_name": "pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 70,
        "func_name": "AssertionRewritingHook.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 86,
        "func_name": "AssertionRewritingHook.set_session",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 93,
        "func_name": "AssertionRewritingHook.find_spec",
        "type_comments": [
            {
                "type": "(str, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 13
            },
            {
                "type": "(str, _frozen_importlib_external._NamespacePath, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(str, List[str], None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 37
            },
            {
                "type": "(str, None, None) -> _frozen_importlib.ModuleSpec",
                "samples": 13
            },
            {
                "type": "(str, List[str], None) -> _frozen_importlib.ModuleSpec",
                "samples": 37
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 133,
        "func_name": "AssertionRewritingHook.create_module",
        "type_comments": [
            {
                "type": "(_frozen_importlib.ModuleSpec) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 138,
        "func_name": "AssertionRewritingHook.exec_module",
        "type_comments": [
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 180,
        "func_name": "AssertionRewritingHook._early_rewrite_bailout",
        "type_comments": [
            {
                "type": "(str, _pytest.assertion.AssertionState::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 57
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 219,
        "func_name": "AssertionRewritingHook._should_rewrite",
        "type_comments": [
            {
                "type": "(str, str, _pytest.assertion.AssertionState::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(str, str, _pytest.assertion.AssertionState::object) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 240,
        "func_name": "AssertionRewritingHook._is_marked_for_rewrite",
        "type_comments": [
            {
                "type": "(str, _pytest.assertion.AssertionState::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 57
            },
            {
                "type": "(str, _pytest.assertion.AssertionState::object) -> bool",
                "samples": 57
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 253,
        "func_name": "AssertionRewritingHook.mark_rewrite",
        "type_comments": [
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 303,
        "func_name": "_write_pyc_fp",
        "type_comments": [
            {
                "type": "(_io.BufferedWriter, os.stat_result, code) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 321,
        "func_name": "_write_pyc",
        "type_comments": [
            {
                "type": "(_pytest.assertion.AssertionState::object, code, os.stat_result, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 346,
        "func_name": "_rewrite_test",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.config.Config::object) -> Tuple[os.stat_result/code]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 357,
        "func_name": "_read_pyc",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, pathlib.PosixPath, pluggy._tracing.TagTracerSub) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(pathlib.PosixPath, pathlib.PosixPath, pluggy._tracing.TagTracerSub) -> code",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 406,
        "func_name": "rewrite_asserts",
        "type_comments": [
            {
                "type": "(ast.Module, bytes, str, _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 656,
        "func_name": "AssertionRewriter.__init__",
        "type_comments": [
            {
                "type": "(str, _pytest.config.Config::object, bytes) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 671,
        "func_name": "AssertionRewriter.run",
        "type_comments": [
            {
                "type": "(ast.Module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 1152,
        "func_name": "try_makedirs",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
        "line": 1174,
        "func_name": "get_cache_dir",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/assertion/util.py",
        "line": 519,
        "func_name": "running_on_ci",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 67,
        "func_name": "Cache.__init__",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.config.Config::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 74,
        "func_name": "for_config",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, bool) -> _pytest.cacheprovider.Cache::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 98,
        "func_name": "cache_dir_from_config",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, bool) -> pathlib.PosixPath",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 143,
        "func_name": "Cache._getvaluepath",
        "type_comments": [
            {
                "type": "(str) -> pathlib.PosixPath",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 146,
        "func_name": "Cache.get",
        "type_comments": [
            {
                "type": "(str, List) -> List[str]",
                "samples": 1
            },
            {
                "type": "(str, Dict) -> Dict[str => bool]",
                "samples": 2
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 165,
        "func_name": "Cache.set",
        "type_comments": [
            {
                "type": "(str, List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 298,
        "func_name": "LFPlugin.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 325,
        "func_name": "LFPlugin.pytest_report_collectionfinish",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 330,
        "func_name": "LFPlugin.pytest_runtest_logreport",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 336,
        "func_name": "LFPlugin.pytest_collectreport",
        "type_comments": [
            {
                "type": "(_pytest.reports.CollectReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 345,
        "func_name": "LFPlugin.pytest_collection_modifyitems",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, List[_pytest.python.Function::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.config.Config::object, List[_pytest.python.Function::object]) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 397,
        "func_name": "LFPlugin.pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 411,
        "func_name": "NFPlugin.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 417,
        "func_name": "NFPlugin.pytest_collection_modifyitems",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(List[_pytest.python.Function::object]) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 442,
        "func_name": "NFPlugin.pytest_sessionfinish",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 454,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 512,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 520,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/cacheprovider.py",
        "line": 543,
        "func_name": "pytest_report_header",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 45,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 64,
        "func_name": "_colorama_workaround",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 79,
        "func_name": "_windowsconsoleio_workaround",
        "type_comments": [
            {
                "type": "(_io.StringIO) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 135,
        "func_name": "pytest_load_initial_conftests",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.config.Config::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 164,
        "func_name": "name",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 228,
        "func_name": "DontReadFromInput.close",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 336,
        "func_name": "SysCaptureBase.__init__",
        "type_comments": [
            {
                "type": "(int, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(int, _pytest.capture.EncodedFile::_io.TextIOWrapper, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 368,
        "func_name": "SysCaptureBase._assert_state",
        "type_comments": [
            {
                "type": "(str, Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(str, Tuple[str/str/str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(str, Tuple[str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 42
            }
        ],
        "samples": 48
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 375,
        "func_name": "SysCaptureBase.start",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 380,
        "func_name": "SysCaptureBase.done",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 389,
        "func_name": "SysCaptureBase.suspend",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 22
            }
        ],
        "samples": 22
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 394,
        "func_name": "SysCaptureBase.resume",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 20
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 438,
        "func_name": "FDCaptureBase.__init__",
        "type_comments": [
            {
                "type": "(int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 488,
        "func_name": "FDCaptureBase._assert_state",
        "type_comments": [
            {
                "type": "(str, Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(str, Tuple[str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 48
            }
        ],
        "samples": 51
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 495,
        "func_name": "FDCaptureBase.start",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 502,
        "func_name": "FDCaptureBase.done",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 518,
        "func_name": "FDCaptureBase.suspend",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 22
            }
        ],
        "samples": 22
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 526,
        "func_name": "FDCaptureBase.resume",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 20
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 565,
        "func_name": "FDCapture.snap",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 22
            }
        ],
        "samples": 22
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 607,
        "func_name": "MultiCapture.__init__",
        "type_comments": [
            {
                "type": "(_pytest.capture.FDCapture::abc.ABC, _pytest.capture.FDCapture::abc.ABC, _pytest.capture.FDCapture::abc.ABC) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 626,
        "func_name": "MultiCapture.start_capturing",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 635,
        "func_name": "MultiCapture.pop_outerr_to_orig",
        "type_comments": [
            {
                "type": "() -> Tuple[str/str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 646,
        "func_name": "MultiCapture.suspend_capturing",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 11
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 656,
        "func_name": "MultiCapture.resume_capturing",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 667,
        "func_name": "MultiCapture.stop_capturing",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 683,
        "func_name": "MultiCapture.readouterr",
        "type_comments": [
            {
                "type": "() -> _pytest.capture.CaptureResult::tuple",
                "samples": 11
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 690,
        "func_name": "_get_multicapture",
        "type_comments": [
            {
                "type": "(str) -> _pytest.capture.MultiCapture::typing.Generic",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 726,
        "func_name": "CaptureManager.__init__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 748,
        "func_name": "CaptureManager.start_global_capturing",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 753,
        "func_name": "CaptureManager.stop_global_capturing",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 759,
        "func_name": "CaptureManager.resume_global_capture",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 765,
        "func_name": "CaptureManager.suspend_global_capture",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 11
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 778,
        "func_name": "CaptureManager.read_global_capture",
        "type_comments": [
            {
                "type": "() -> _pytest.capture.CaptureResult::tuple",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 798,
        "func_name": "CaptureManager.activate_fixture",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 804,
        "func_name": "CaptureManager.deactivate_fixture",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 836,
        "func_name": "item_capture",
        "type_comments": [
            {
                "type": "(str, _pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "(str, _pytest.python.Function::object) -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 852,
        "func_name": "CaptureManager.pytest_make_collect_report",
        "type_comments": [
            {
                "type": "(_pytest.python.Module::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Module::object) -> Iterator",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 867,
        "func_name": "CaptureManager.pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 872,
        "func_name": "CaptureManager.pytest_runtest_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/capture.py",
        "line": 877,
        "func_name": "CaptureManager.pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 48,
        "func_name": "legacy_path",
        "type_comments": [
            {
                "type": "(str) -> _pytest._py.path.LocalPath::object",
                "samples": 3
            },
            {
                "type": "(pathlib.PosixPath) -> _pytest._py.path.LocalPath::object",
                "samples": 12
            }
        ],
        "samples": 15
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 73,
        "func_name": "is_generator",
        "type_comments": [
            {
                "type": "(function) -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 78,
        "func_name": "iscoroutinefunction",
        "type_comments": [
            {
                "type": "(function) -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 90,
        "func_name": "is_async_function",
        "type_comments": [
            {
                "type": "(function) -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 129,
        "func_name": "getfuncargnames",
        "type_comments": [
            {
                "type": "(function, str, bool, None) -> Tuple[str/str]",
                "samples": 20
            },
            {
                "type": "(function, str, bool, None) -> Tuple[str]",
                "samples": 20
            },
            {
                "type": "(function, str, bool, None) -> Tuple[]",
                "samples": 20
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 266,
        "func_name": "get_real_func",
        "type_comments": [
            {
                "type": "(function) -> function",
                "samples": 23
            }
        ],
        "samples": 23
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 295,
        "func_name": "get_real_method",
        "type_comments": [
            {
                "type": "(function, type) -> function",
                "samples": 2
            },
            {
                "type": "(function, module) -> function",
                "samples": 15
            }
        ],
        "samples": 17
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 316,
        "func_name": "safe_getattr",
        "type_comments": [
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str, None) -> None",
                "samples": 2
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str, None) -> None",
                "samples": 5
            },
            {
                "type": "(module, str, None) -> _frozen_importlib_external.SourceFileLoader",
                "samples": 79
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> bool",
                "samples": 33
            },
            {
                "type": "(module, str, None) -> bool",
                "samples": 79
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> Dict[str => Union[Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]/List[Tuple[module/pluggy._manager.DistFacade]]/pluggy._hooks.HookRelay/pluggy._tracing.TagTracerSub/str]]",
                "samples": 33
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> List",
                "samples": 33
            },
            {
                "type": "(module, str, None) -> List[Tuple[str/str]]",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> Dict[str => Union[_frozen_importlib.ModuleSpec/str/type]]",
                "samples": 79
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str, None) -> Dict[str => Optional[Union[Dict[str => bool]/_pytest.config.Config::object/bool]]]",
                "samples": 2
            },
            {
                "type": "(type, str, None) -> None",
                "samples": 2
            },
            {
                "type": "(method-wrapper, str, None) -> None",
                "samples": 11
            },
            {
                "type": "(Dict[str => Union[Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]/List[Tuple[module/pluggy._manager.DistFacade]]/pluggy._hooks.HookRelay/pluggy._tracing.TagTracerSub/str]], str, None) -> None",
                "samples": 1
            },
            {
                "type": "(builtin_function_or_method, str, None) -> None",
                "samples": 8
            },
            {
                "type": "(str, str, None) -> None",
                "samples": 2
            },
            {
                "type": "(bool, str, None) -> None",
                "samples": 2
            },
            {
                "type": "(method, str, None) -> None",
                "samples": 1
            },
            {
                "type": "(None, str, None) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> enum.EnumType",
                "samples": 16
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> _pytest._py.path.LocalPath::object",
                "samples": 16
            },
            {
                "type": "(module, str, None) -> typing._TupleType",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> module",
                "samples": 79
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> str",
                "samples": 33
            },
            {
                "type": "(module, str, None) -> str",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> _pytest.nodes.NodeMeta::type",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> typing._SpecialGenericAlias",
                "samples": 79
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> method-wrapper",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> method-wrapper",
                "samples": 16
            },
            {
                "type": "(module, str, None) -> enum.EnumType",
                "samples": 79
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, str, None) -> method-wrapper",
                "samples": 2
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, str, None) -> method-wrapper",
                "samples": 2
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str, None) -> method-wrapper",
                "samples": 2
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> type",
                "samples": 33
            },
            {
                "type": "(module, str, None) -> type",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> function",
                "samples": 79
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> method",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> method",
                "samples": 16
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, str, None) -> method",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object, str, None) -> method",
                "samples": 3
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, str, None) -> method",
                "samples": 2
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str, None) -> method",
                "samples": 5
            },
            {
                "type": "(type, str, None) -> wrapper_descriptor",
                "samples": 2
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str, None) -> method",
                "samples": 2
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str, None) -> method",
                "samples": 2
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, None) -> builtin_function_or_method",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> builtin_function_or_method",
                "samples": 16
            },
            {
                "type": "(_pytest.main.Session::object, str, None) -> builtin_function_or_method",
                "samples": 3
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, str, None) -> builtin_function_or_method",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str, None) -> builtin_function_or_method",
                "samples": 5
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str, None) -> builtin_function_or_method",
                "samples": 2
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str, None) -> _pytest._io.terminalwriter.TerminalWriter::object",
                "samples": 5
            },
            {
                "type": "(_pytest.config.Config::object, str, None) -> _pytest.cacheprovider.Cache::object",
                "samples": 16
            },
            {
                "type": "(module, str, None) -> _pytest.stash.StashKey::typing.Generic",
                "samples": 79
            },
            {
                "type": "(module, str, None) -> typing._SpecialForm",
                "samples": 79
            }
        ],
        "samples": 175
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/compat.py",
        "line": 333,
        "func_name": "safe_isclass",
        "type_comments": [
            {
                "type": "(module) -> bool",
                "samples": 2
            },
            {
                "type": "(function) -> bool",
                "samples": 3
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 134,
        "func_name": "main",
        "type_comments": [
            {
                "type": "(List[str], None) -> _pytest.config.ExitCode",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 269,
        "func_name": "get_config",
        "type_comments": [
            {
                "type": "(List[str], None) -> _pytest.config.Config::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 305,
        "func_name": "_prepareconfig",
        "type_comments": [
            {
                "type": "(List[str], None) -> _pytest.config.Config::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 337,
        "func_name": "_get_directory",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 345,
        "func_name": "_get_legacy_hook_marks",
        "type_comments": [
            {
                "type": "(function, str, Tuple[str/str/str/str]) -> Dict[str => bool]",
                "samples": 22
            },
            {
                "type": "(method, str, Tuple[str/str/str/str]) -> Dict[str => bool]",
                "samples": 4
            },
            {
                "type": "(function, str, Tuple[str/str]) -> Dict[str => bool]",
                "samples": 30
            }
        ],
        "samples": 56
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 387,
        "func_name": "PytestPluginManager.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 440,
        "func_name": "PytestPluginManager.parse_hookimpl_opts",
        "type_comments": [
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 52
            },
            {
                "type": "(module, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            },
            {
                "type": "(_pytest.config.Config::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, str) -> Dict[str => bool]",
                "samples": 61
            },
            {
                "type": "(_pytest.main.Session::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 131
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 463,
        "func_name": "PytestPluginManager.parse_hookspec_opts",
        "type_comments": [
            {
                "type": "(module, str) -> None",
                "samples": 52
            },
            {
                "type": "(module, str) -> Dict[str => Optional[Union[bool/pytest.PytestRemovedIn8Warning::UserWarning]]]",
                "samples": 52
            },
            {
                "type": "(module, str) -> Dict[str => bool]",
                "samples": 52
            },
            {
                "type": "(module, str) -> Dict[str => Optional[bool]]",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 475,
        "func_name": "PytestPluginManager.register",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, None) -> str",
                "samples": 1
            },
            {
                "type": "(module, str) -> str",
                "samples": 33
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, None) -> str",
                "samples": 1
            },
            {
                "type": "(type, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.main.Session::object, str) -> str",
                "samples": 1
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 507,
        "func_name": "PytestPluginManager.pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 528,
        "func_name": "PytestPluginManager._set_initial_conftests",
        "type_comments": [
            {
                "type": "(List[str], bool, bool, pathlib.PosixPath, str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 569,
        "func_name": "PytestPluginManager._is_in_confcutdir",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> bool",
                "samples": 43
            }
        ],
        "samples": 43
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 578,
        "func_name": "PytestPluginManager._try_load_conftest",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, str, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 588,
        "func_name": "PytestPluginManager._getconftestmodules",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, str, pathlib.PosixPath) -> List",
                "samples": 50
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 615,
        "func_name": "PytestPluginManager._rget_with_confmod",
        "type_comments": [
            {
                "type": "(str, pathlib.PosixPath, str, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 687,
        "func_name": "PytestPluginManager.consider_preparse",
        "type_comments": [
            {
                "type": "(List[str], bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 742,
        "func_name": "PytestPluginManager.consider_env",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 746,
        "func_name": "PytestPluginManager.consider_module",
        "type_comments": [
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 35
            }
        ],
        "samples": 35
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 750,
        "func_name": "PytestPluginManager._import_plugin_specs",
        "type_comments": [
            {
                "type": "(List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 35
            },
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 757,
        "func_name": "PytestPluginManager.import_plugin",
        "type_comments": [
            {
                "type": "(str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 32
            }
        ],
        "samples": 32
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 795,
        "func_name": "_get_plugin_specs_as_list",
        "type_comments": [
            {
                "type": "(None) -> List",
                "samples": 1
            },
            {
                "type": "(List) -> List",
                "samples": 35
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 832,
        "func_name": "_iter_rewritable_modules",
        "type_comments": [
            {
                "type": "(List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(generator) -> Iterator[str]",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 933,
        "func_name": "InvocationParams.__init__",
        "type_comments": [
            {
                "type": "(List[str], None, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 957,
        "func_name": "Config.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, _pytest.config:Config.InvocationParams::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1024,
        "func_name": "rootpath",
        "type_comments": [
            {
                "type": "() -> pathlib.PosixPath",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1034,
        "func_name": "inipath",
        "type_comments": [
            {
                "type": "() -> pathlib.PosixPath",
                "samples": 8
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1044,
        "func_name": "Config.add_cleanup",
        "type_comments": [
            {
                "type": "(function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(method) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1049,
        "func_name": "Config._do_configure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1056,
        "func_name": "Config._ensure_unconfigure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1071,
        "func_name": "Config.pytest_cmdline_parse",
        "type_comments": [
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, List[str]) -> _pytest.config.Config::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1114,
        "func_name": "Config.cwd_relative_nodeid",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1131,
        "func_name": "Config._processopt",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Argument::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1139,
        "func_name": "Config.pytest_load_initial_conftests",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1162,
        "func_name": "Config._initini",
        "type_comments": [
            {
                "type": "(List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1187,
        "func_name": "Config._consider_importhook",
        "type_comments": [
            {
                "type": "(List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1207,
        "func_name": "Config._mark_plugins_for_rewrite",
        "type_comments": [
            {
                "type": "(_pytest.assertion.rewrite.AssertionRewritingHook::importlib.abc.MetaPathFinder) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1227,
        "func_name": "Config._validate_args",
        "type_comments": [
            {
                "type": "(List[str], str) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1239,
        "func_name": "Config._decide_args",
        "type_comments": [
            {
                "type": "(List[str], bool, List, pathlib.PosixPath, pathlib.PosixPath, bool) -> Tuple[List[str]/_pytest.config:Config.ArgsSource]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1282,
        "func_name": "Config._preparse",
        "type_comments": [
            {
                "type": "(List[str], bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1341,
        "func_name": "Config.pytest_collection",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1348,
        "func_name": "Config._checkversion",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1371,
        "func_name": "Config._validate_config_options",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1375,
        "func_name": "Config._validate_plugins",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1413,
        "func_name": "Config._get_unknown_ini_keys",
        "type_comments": [
            {
                "type": "() -> List",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1417,
        "func_name": "Config.parse",
        "type_comments": [
            {
                "type": "(List[str], bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1479,
        "func_name": "Config.addinivalue_line",
        "type_comments": [
            {
                "type": "(str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 11
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1487,
        "func_name": "Config.getini",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 51
            },
            {
                "type": "(str) -> List",
                "samples": 51
            },
            {
                "type": "(str) -> List[str]",
                "samples": 51
            },
            {
                "type": "(str) -> str",
                "samples": 51
            },
            {
                "type": "(str) -> int",
                "samples": 51
            },
            {
                "type": "(str) -> float",
                "samples": 51
            }
        ],
        "samples": 51
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1506,
        "func_name": "Config._getini",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 31
            },
            {
                "type": "(str) -> bool",
                "samples": 31
            },
            {
                "type": "(str) -> List",
                "samples": 31
            },
            {
                "type": "(str) -> List[str]",
                "samples": 31
            },
            {
                "type": "(str) -> str",
                "samples": 31
            },
            {
                "type": "(str) -> int",
                "samples": 31
            },
            {
                "type": "(str) -> float",
                "samples": 31
            }
        ],
        "samples": 31
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1560,
        "func_name": "Config._getconftest_pathlist",
        "type_comments": [
            {
                "type": "(str, pathlib.PosixPath, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1581,
        "func_name": "Config._get_override_ini_value",
        "type_comments": [
            {
                "type": "(str) -> None",
                "samples": 31
            }
        ],
        "samples": 31
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1600,
        "func_name": "Config.getoption",
        "type_comments": [
            {
                "type": "(str, _pytest.config.Notset::object, bool) -> bool",
                "samples": 50
            },
            {
                "type": "(str, _pytest.config.Notset::object, bool) -> str",
                "samples": 50
            },
            {
                "type": "(str, bool, bool) -> bool",
                "samples": 4
            },
            {
                "type": "(str, _pytest.config.Notset::object, bool) -> None",
                "samples": 50
            },
            {
                "type": "(str, str, bool) -> str",
                "samples": 2
            },
            {
                "type": "(str, int, bool) -> int",
                "samples": 1
            },
            {
                "type": "(str, _pytest.config.Notset::object, bool) -> float",
                "samples": 50
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1624,
        "func_name": "Config.getvalue",
        "type_comments": [
            {
                "type": "(str, None) -> bool",
                "samples": 10
            },
            {
                "type": "(str, None) -> None",
                "samples": 10
            },
            {
                "type": "(str, None) -> str",
                "samples": 10
            },
            {
                "type": "(str, None) -> int",
                "samples": 10
            },
            {
                "type": "(str, None) -> float",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1632,
        "func_name": "Config._warn_about_missing_assertion",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1653,
        "func_name": "Config._warn_about_skipped_plugins",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1661,
        "func_name": "_assertion_supported",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1670,
        "func_name": "create_terminal_writer",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, None) -> _pytest._io.terminalwriter.TerminalWriter::object",
                "samples": 2
            },
            {
                "type": "(_pytest.config.Config::object, _io.StringIO) -> _pytest._io.terminalwriter.TerminalWriter::object",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/__init__.py",
        "line": 1806,
        "func_name": "apply_warning_filters",
        "type_comments": [
            {
                "type": "(List, List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 43,
        "func_name": "Parser.__init__",
        "type_comments": [
            {
                "type": "(str, method, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 59,
        "func_name": "Parser.processoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Argument::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 64,
        "func_name": "Parser.getgroup",
        "type_comments": [
            {
                "type": "(str, str, str) -> _pytest.config.argparsing.OptionGroup::object",
                "samples": 2
            },
            {
                "type": "(str, str, None) -> _pytest.config.argparsing.OptionGroup::object",
                "samples": 20
            }
        ],
        "samples": 22
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 106,
        "func_name": "Parser.parse",
        "type_comments": [
            {
                "type": "(List[str], argparse.Namespace) -> argparse.Namespace",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 118,
        "func_name": "Parser._getparser",
        "type_comments": [
            {
                "type": "() -> _pytest.config.argparsing.MyOptionParser::argparse.ArgumentParser",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 137,
        "func_name": "Parser.parse_setoption",
        "type_comments": [
            {
                "type": "(List[str], argparse.Namespace, argparse.Namespace) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 148,
        "func_name": "Parser.parse_known_args",
        "type_comments": [
            {
                "type": "(List[str], argparse.Namespace) -> argparse.Namespace",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 159,
        "func_name": "Parser.parse_known_and_unknown_args",
        "type_comments": [
            {
                "type": "(List[str], argparse.Namespace) -> Tuple[argparse.Namespace/List[str]]",
                "samples": 4
            },
            {
                "type": "(List[str], argparse.Namespace) -> Tuple[argparse.Namespace/List]",
                "samples": 4
            },
            {
                "type": "(List[str], None) -> Tuple[argparse.Namespace/List[str]]",
                "samples": 1
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 175,
        "func_name": "Parser.addini",
        "type_comments": [
            {
                "type": "(str, str, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(str, str, str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(str, str, str, List[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(str, str, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            },
            {
                "type": "(str, str, str, List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "(str, str, None, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            },
            {
                "type": "(str, str, None, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, str, None, float) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 43
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 239,
        "func_name": "Argument.__init__",
        "type_comments": [
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 288,
        "func_name": "Argument.names",
        "type_comments": [
            {
                "type": "() -> List[str]",
                "samples": 105
            }
        ],
        "samples": 105
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 291,
        "func_name": "Argument.attrs",
        "type_comments": [
            {
                "type": "() -> Dict[str => Union[bool/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[function/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[int/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[List[str]/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => str]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[Tuple[str/str]/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Optional[Union[str/type]]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[float/str/type]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[int/str/type]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Optional[Union[List[str]/str]]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Optional[str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[str/type]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Union[List/str]]",
                "samples": 84
            },
            {
                "type": "() -> Dict[str => Optional[Union[functools.partial/str]]]",
                "samples": 84
            }
        ],
        "samples": 84
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 307,
        "func_name": "Argument._set_opt_strings",
        "type_comments": [
            {
                "type": "(Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 36
            },
            {
                "type": "(Tuple[str/str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Tuple[str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 16
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 353,
        "func_name": "OptionGroup.__init__",
        "type_comments": [
            {
                "type": "(str, str, _pytest.config.argparsing.Parser::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 367,
        "func_name": "OptionGroup.addoption",
        "type_comments": [
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 51
            }
        ],
        "samples": 51
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 389,
        "func_name": "OptionGroup._addoption",
        "type_comments": [
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            }
        ],
        "samples": 33
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 393,
        "func_name": "OptionGroup._addoption_instance",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Argument::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 404,
        "func_name": "MyOptionParser.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object, Dict, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.argparsing.Parser::object, Dict[str => str], None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 433,
        "func_name": "MyOptionParser.parse_args",
        "type_comments": [
            {
                "type": "(List[str], argparse.Namespace) -> argparse.Namespace",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/argparsing.py",
        "line": 497,
        "func_name": "DropShorterLongHelpFormatter.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/compat.py",
        "line": 21,
        "func_name": "PathAwareHookProxy",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/compat.py",
        "line": 30,
        "func_name": "PathAwareHookProxy.__init__",
        "type_comments": [
            {
                "type": "(pluggy._hooks.HookRelay) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/compat.py",
        "line": 36,
        "func_name": "PathAwareHookProxy.__getattr__",
        "type_comments": [
            {
                "type": "(str, function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 39
            },
            {
                "type": "(str, function) -> function",
                "samples": 39
            },
            {
                "type": "(str, function) -> pluggy._hooks.HookCaller",
                "samples": 39
            }
        ],
        "samples": 39
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/compat.py",
        "line": 44,
        "func_name": "fixed_hook",
        "type_comments": [
            {
                "type": "() -> List[Union[List/List[str]]]",
                "samples": 10
            },
            {
                "type": "() -> _pytest.python.Package::object",
                "samples": 10
            },
            {
                "type": "() -> _pytest.python.Module::object",
                "samples": 10
            },
            {
                "type": "() -> List",
                "samples": 10
            },
            {
                "type": "() -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 10
            },
            {
                "type": "() -> None",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 24,
        "func_name": "_parse_ini_config",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> iniconfig.IniConfig",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 36,
        "func_name": "load_config_dict_from_file",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> Dict[str => str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 92,
        "func_name": "locate_config",
        "type_comments": [
            {
                "type": "(List[pathlib.PosixPath]) -> Tuple[pathlib.PosixPath/pathlib.PosixPath/Dict[str => str]]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 119,
        "func_name": "get_common_ancestor",
        "type_comments": [
            {
                "type": "(List[pathlib.PosixPath]) -> pathlib.PosixPath",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 142,
        "func_name": "get_dirs_from_args",
        "type_comments": [
            {
                "type": "(List[str]) -> List[pathlib.PosixPath]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 143,
        "func_name": "is_option",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 146,
        "func_name": "get_file_part_from_node_id",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 149,
        "func_name": "get_dir_from_path",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 154,
        "func_name": "safe_exists",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> bool",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/config/findpaths.py",
        "line": 175,
        "func_name": "determine_setup",
        "type_comments": [
            {
                "type": "(None, List[str], None, _pytest.config.Config::object) -> Tuple[pathlib.PosixPath/pathlib.PosixPath/Dict[str => str]]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/debugging.py",
        "line": 44,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/debugging.py",
        "line": 68,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/debugging.py",
        "line": 85,
        "func_name": "fin",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/deprecated.py",
        "line": 144,
        "func_name": "check_ispytest",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 41
            }
        ],
        "samples": 41
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/doctest.py",
        "line": 69,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/doctest.py",
        "line": 119,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/doctest.py",
        "line": 125,
        "func_name": "pytest_collect_file",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(pathlib.PosixPath, _pytest.python.Package::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 17,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 25,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 33,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 46,
        "func_name": "get_stderr_fileno",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 61,
        "func_name": "get_timeout_config_value",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> float",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 65,
        "func_name": "pytest_runtest_protocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/faulthandler.py",
        "line": 89,
        "func_name": "pytest_exception_interact",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 112,
        "func_name": "pytest_sessionstart",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 226,
        "func_name": "getfixturemarker",
        "type_comments": [
            {
                "type": "(builtin_function_or_method) -> None",
                "samples": 11
            },
            {
                "type": "(Dict[str => Union[Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]/List[Tuple[module/pluggy._manager.DistFacade]]/pluggy._hooks.HookRelay/pluggy._tracing.TagTracerSub/str]]) -> None",
                "samples": 1
            },
            {
                "type": "(str) -> None",
                "samples": 11
            },
            {
                "type": "(method-wrapper) -> None",
                "samples": 13
            },
            {
                "type": "(bool) -> None",
                "samples": 5
            },
            {
                "type": "(method) -> None",
                "samples": 25
            },
            {
                "type": "(None) -> None",
                "samples": 1
            },
            {
                "type": "(pathlib.PosixPath) -> None",
                "samples": 1
            },
            {
                "type": "(Set) -> None",
                "samples": 2
            },
            {
                "type": "(_pytest.nodes.NodeMeta::type) -> None",
                "samples": 5
            },
            {
                "type": "(Dict[pathlib.PosixPath => List]) -> None",
                "samples": 1
            },
            {
                "type": "(functools._lru_cache_wrapper) -> None",
                "samples": 1
            },
            {
                "type": "(function) -> None",
                "samples": 19
            },
            {
                "type": "(Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]) -> None",
                "samples": 1
            },
            {
                "type": "(List[Tuple[module/pluggy._manager.DistFacade]]) -> None",
                "samples": 1
            },
            {
                "type": "(enum.EnumType) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.Cache::object) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest._py.path.LocalPath::object) -> None",
                "samples": 1
            },
            {
                "type": "(typing._SpecialForm) -> None",
                "samples": 3
            },
            {
                "type": "(type) -> None",
                "samples": 17
            },
            {
                "type": "(module) -> None",
                "samples": 5
            },
            {
                "type": "(List[Tuple[str/str]]) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest.compat.NotSetType) -> None",
                "samples": 1
            },
            {
                "type": "(typing._SpecialGenericAlias) -> None",
                "samples": 1
            },
            {
                "type": "(typing._TupleType) -> None",
                "samples": 1
            },
            {
                "type": "(Dict[str => Optional[Union[Dict[str => bool]/_pytest.config.Config::object/bool]]]) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> None",
                "samples": 1
            }
        ],
        "samples": 132
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 239,
        "func_name": "get_parametrized_fixture_keys",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.scope.Scope) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 275,
        "func_name": "reorder_items",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object]) -> List[_pytest.python.Function::object]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 305,
        "func_name": "reorder_items_atscope",
        "type_comments": [
            {
                "type": "(Dict[_pytest.python.Function::object => None], Dict[_pytest.scope.Scope => Dict], Dict[_pytest.scope.Scope => collections.defaultdict], _pytest.scope.Scope) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 5
            },
            {
                "type": "(Dict[_pytest.python.Function::object => None], Dict[_pytest.scope.Scope => Dict], Dict[_pytest.scope.Scope => collections.defaultdict], _pytest.scope.Scope) -> Dict[_pytest.python.Function::object => None]",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 404,
        "func_name": "FixtureRequest.__init__",
        "type_comments": [
            {
                "type": "(_pytest.python.FunctionDefinition::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(_pytest.python.Function::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 430,
        "func_name": "fixturenames",
        "type_comments": [
            {
                "type": "() -> List",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 561,
        "func_name": "FixtureRequest._fillfixtures",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 947,
        "func_name": "FixtureDef.__init__",
        "type_comments": [
            {
                "type": "(_pytest.fixtures.FixtureManager::object, None, str, function, str, None, bool, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 17
            }
        ],
        "samples": 17
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1153,
        "func_name": "wrap_function_to_error_out_if_called_directly",
        "type_comments": [
            {
                "type": "(function, _pytest.fixtures.FixtureFunctionMarker::object) -> function",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1190,
        "func_name": "FixtureFunctionMarker.__post_init__",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1193,
        "func_name": "FixtureFunctionMarker.__call__",
        "type_comments": [
            {
                "type": "(function) -> function",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1249,
        "func_name": "fixture",
        "type_comments": [
            {
                "type": "(None, str, None, bool, None, None) -> _pytest.fixtures.FixtureFunctionMarker::object",
                "samples": 1
            },
            {
                "type": "(function, str, None, bool, None, None) -> function",
                "samples": 2
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1367,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1410,
        "func_name": "FixtureManager.__init__",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1421,
        "func_name": "FixtureManager._get_direct_parametrize_args",
        "type_comments": [
            {
                "type": "(_pytest.python.FunctionDefinition::object) -> List",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1440,
        "func_name": "FixtureManager.getfixtureinfo",
        "type_comments": [
            {
                "type": "(_pytest.python.FunctionDefinition::object, function, None, bool) -> _pytest.fixtures.FuncFixtureInfo::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1458,
        "func_name": "FixtureManager.pytest_plugin_registered",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1480,
        "func_name": "FixtureManager._getautousenames",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1487,
        "func_name": "FixtureManager.getfixtureclosure",
        "type_comments": [
            {
                "type": "(Tuple[], _pytest.python.FunctionDefinition::object, List) -> Tuple[Tuple[]/List/Dict]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1503,
        "func_name": "merge",
        "type_comments": [
            {
                "type": "(Tuple[]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1540,
        "func_name": "FixtureManager.pytest_generate_tests",
        "type_comments": [
            {
                "type": "(_pytest.python.Metafunc::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1585,
        "func_name": "FixtureManager.pytest_collection_modifyitems",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/fixtures.py",
        "line": 1608,
        "func_name": "FixtureManager.parsefactories",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Module::object, _pytest.compat.NotSetType, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 45
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 16,
        "func_name": "HelpAction",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 26,
        "func_name": "HelpAction.__init__",
        "type_comments": [
            {
                "type": "(List[str], str, bool, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 44,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 100,
        "func_name": "pytest_cmdline_parse",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 147,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/helpconfig.py",
        "line": 248,
        "func_name": "pytest_report_header",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> List",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 67,
        "func_name": "merge_family",
        "type_comments": [
            {
                "type": "(Dict[str => List[str]], Dict[str => List[str]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 89,
        "func_name": "_NodeReporter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 382,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 429,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 446,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/junitxml.py",
        "line": 464,
        "func_name": "LogXML",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 285,
        "func_name": "TempdirFactory.__init__",
        "type_comments": [
            {
                "type": "(_pytest.tmpdir.TempPathFactory::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 345,
        "func_name": "TerminalReporter_startdir",
        "type_comments": [
            {
                "type": "() -> _pytest._py.path.LocalPath::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 355,
        "func_name": "Config_invocation_dir",
        "type_comments": [
            {
                "type": "() -> _pytest._py.path.LocalPath::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 366,
        "func_name": "Config_rootdir",
        "type_comments": [
            {
                "type": "() -> _pytest._py.path.LocalPath::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 376,
        "func_name": "Config_inifile",
        "type_comments": [
            {
                "type": "() -> _pytest._py.path.LocalPath::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 386,
        "func_name": "Session_stardir",
        "type_comments": [
            {
                "type": "() -> _pytest._py.path.LocalPath::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 418,
        "func_name": "pytest_load_initial_conftests",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 450,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/legacypath.py",
        "line": 473,
        "func_name": "pytest_plugin_registered",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, _pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 93,
        "func_name": "ColoredLevelFormatter.__init__",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object, *str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 102,
        "func_name": "ColoredLevelFormatter.add_color_level",
        "type_comments": [
            {
                "type": "(int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(int, *str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 10
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 146,
        "func_name": "PercentStyleMultiline.__init__",
        "type_comments": [
            {
                "type": "(str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 150,
        "func_name": "_get_auto_indent",
        "type_comments": [
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 229,
        "func_name": "get_option_ini",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, *str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            },
            {
                "type": "(_pytest.config.Config::object, *str) -> str",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 238,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 242,
        "func_name": "add_option_ini",
        "type_comments": [
            {
                "type": "(str, str, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(str, str, str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 340,
        "func_name": "catching_logs.__init__",
        "type_comments": [
            {
                "type": "(_pytest.logging._LiveLoggingNullHandler::logging.NullHandler, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "(_pytest.logging.LogCaptureHandler::logging.StreamHandler, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "(_pytest.logging._FileHandler::logging.FileHandler, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 26
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 344,
        "func_name": "catching_logs.__enter__",
        "type_comments": [
            {
                "type": "() -> _pytest.logging._LiveLoggingNullHandler::logging.NullHandler",
                "samples": 26
            },
            {
                "type": "() -> _pytest.logging.LogCaptureHandler::logging.StreamHandler",
                "samples": 26
            },
            {
                "type": "() -> _pytest.logging._FileHandler::logging.FileHandler",
                "samples": 26
            }
        ],
        "samples": 26
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 354,
        "func_name": "catching_logs.__exit__",
        "type_comments": [
            {
                "type": "(None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 26
            }
        ],
        "samples": 26
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 364,
        "func_name": "LogCaptureHandler.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 374,
        "func_name": "LogCaptureHandler.reset",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 586,
        "func_name": "get_log_level_for_setting",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, *str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 610,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 618,
        "func_name": "LoggingPlugin.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 678,
        "func_name": "LoggingPlugin._disable_loggers",
        "type_comments": [
            {
                "type": "(List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 686,
        "func_name": "LoggingPlugin._create_formatter",
        "type_comments": [
            {
                "type": "(str, str, None) -> _pytest.logging.ColoredLevelFormatter::logging.Formatter",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 726,
        "func_name": "LoggingPlugin._log_cli_enabled",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 741,
        "func_name": "LoggingPlugin.pytest_sessionstart",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 749,
        "func_name": "LoggingPlugin.pytest_collection",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 757,
        "func_name": "LoggingPlugin.pytest_runtestloop",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 771,
        "func_name": "LoggingPlugin.pytest_runtest_logstart",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 776,
        "func_name": "LoggingPlugin.pytest_runtest_logreport",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 780,
        "func_name": "LoggingPlugin._runtest_for",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "(_pytest.python.Function::object, str) -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 799,
        "func_name": "LoggingPlugin.pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 807,
        "func_name": "LoggingPlugin.pytest_runtest_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 813,
        "func_name": "LoggingPlugin.pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 821,
        "func_name": "LoggingPlugin.pytest_runtest_logfinish",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 825,
        "func_name": "LoggingPlugin.pytest_sessionfinish",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 833,
        "func_name": "LoggingPlugin.pytest_unconfigure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 910,
        "func_name": "_LiveLoggingNullHandler.reset",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/logging.py",
        "line": 913,
        "func_name": "_LiveLoggingNullHandler.set_when",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 27
            }
        ],
        "samples": 27
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 50,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 257,
        "func_name": "wrap_session",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, function) -> _pytest.config.ExitCode",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 316,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> _pytest.config.ExitCode",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 320,
        "func_name": "_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, _pytest.main.Session::object) -> _pytest.config.ExitCode",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 333,
        "func_name": "pytest_collection",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 337,
        "func_name": "pytest_runtestloop",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 357,
        "func_name": "_in_venv",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 377,
        "func_name": "pytest_ignore_collect",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 412,
        "func_name": "pytest_collection_modifyitems",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object], _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 457,
        "func_name": "_bestrelpath_cache.__missing__",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 473,
        "func_name": "Session.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 493,
        "func_name": "from_config",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> _pytest.main.Session::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 507,
        "func_name": "startpath",
        "type_comments": [
            {
                "type": "() -> pathlib.PosixPath",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 515,
        "func_name": "Session._node_location_to_relpath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 519,
        "func_name": "Session.pytest_collectstart",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 526,
        "func_name": "Session.pytest_runtest_logreport",
        "type_comments": [
            {
                "type": "(_pytest.reports.CollectReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 538,
        "func_name": "Session.isinitpath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> bool",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 543,
        "func_name": "Session.gethookproxy",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> _pytest.config.compat.PathAwareHookProxy::object",
                "samples": 47
            }
        ],
        "samples": 47
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 574,
        "func_name": "Session._collectfile",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, bool) -> List[_pytest.python.Package::object]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 610,
        "func_name": "Session.perform_collect",
        "type_comments": [
            {
                "type": "(None, bool) -> List[_pytest.python.Function::object]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 681,
        "func_name": "Session.collect",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "() -> Iterator[_pytest.python.Function::object]",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 827,
        "func_name": "Session.genitems",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator[_pytest.python.Function::object]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/main.py",
        "line": 860,
        "func_name": "resolve_collection_argument",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, str, bool) -> Tuple[pathlib.PosixPath/List[str]]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 70,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 112,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 185,
        "func_name": "deselect_by_keyword",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object], _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 225,
        "func_name": "deselect_by_mark",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object], _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 250,
        "func_name": "pytest_collection_modifyitems",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object], _pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 255,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/__init__.py",
        "line": 268,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 361,
        "func_name": "get_unpacked_marks",
        "type_comments": [
            {
                "type": "(function, bool) -> List",
                "samples": 6
            },
            {
                "type": "(module, bool) -> List",
                "samples": 2
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 392,
        "func_name": "normalize_mark_list",
        "type_comments": [
            {
                "type": "(List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 516,
        "func_name": "MarkGenerator.__getattr__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 565,
        "func_name": "NodeKeywords.__init__",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Module::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Package::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.FunctionDefinition::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 591,
        "func_name": "NodeKeywords.update",
        "type_comments": [
            {
                "type": "(generator) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            },
            {
                "type": "(Dict) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 14
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/mark/structures.py",
        "line": 602,
        "func_name": "NodeKeywords.__iter__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 55
            },
            {
                "type": "() -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 55
            },
            {
                "type": "() -> Iterator[str]",
                "samples": 55
            }
        ],
        "samples": 55
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/monkeypatch.py",
        "line": 131,
        "func_name": "MonkeyPatch.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/monkeypatch.py",
        "line": 184,
        "func_name": "MonkeyPatch.setattr",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, str, _pytest.legacypath.TempdirFactory::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, str, function, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.nodes.NodeMeta::type, str, property, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(type, str, property, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(_pytest.config.Config::object, str, _pytest.tmpdir.TempPathFactory::object, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/monkeypatch.py",
        "line": 380,
        "func_name": "MonkeyPatch.undo",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 52,
        "func_name": "iterparentnodeids",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 27
            },
            {
                "type": "(str) -> Iterator[str]",
                "samples": 27
            }
        ],
        "samples": 27
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 105,
        "func_name": "_imply_path",
        "type_comments": [
            {
                "type": "(_pytest.nodes.NodeMeta::type, pathlib.PosixPath, None) -> pathlib.PosixPath",
                "samples": 14
            }
        ],
        "samples": 14
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 139,
        "func_name": "NodeMeta._create",
        "type_comments": [
            {
                "type": "() -> _pytest.python.Package::object",
                "samples": 10
            },
            {
                "type": "() -> _pytest.python.Module::object",
                "samples": 10
            },
            {
                "type": "() -> _pytest.main.Session::object",
                "samples": 10
            },
            {
                "type": "() -> _pytest.python.Function::object",
                "samples": 10
            },
            {
                "type": "() -> _pytest.python.FunctionDefinition::object",
                "samples": 10
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 186,
        "func_name": "Node.__init__",
        "type_comments": [
            {
                "type": "(str, None, _pytest.config.Config::object, _pytest.main.Session::object, None, pathlib.PosixPath, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, _pytest.python.Package::object, None, _pytest.main.Session::object, None, pathlib.PosixPath, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, _pytest.main.Session::object, None, _pytest.main.Session::object, None, pathlib.PosixPath, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(str, _pytest.python.Module::object, None, None, None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 10
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 247,
        "func_name": "from_parent",
        "type_comments": [
            {
                "type": "(_pytest.python.Module::object) -> _pytest.python.Function::object",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Module::object) -> _pytest.python.FunctionDefinition::object",
                "samples": 6
            },
            {
                "type": "(_pytest.main.Session::object) -> _pytest.python.Package::object",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Package::object) -> _pytest.python.Module::object",
                "samples": 1
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 265,
        "func_name": "ihook",
        "type_comments": [
            {
                "type": "() -> _pytest.config.compat.PathAwareHookProxy::object",
                "samples": 41
            }
        ],
        "samples": 41
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 312,
        "func_name": "nodeid",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 50
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 317,
        "func_name": "Node.__hash__",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 320,
        "func_name": "Node.setup",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 323,
        "func_name": "Node.teardown",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 326,
        "func_name": "Node.listchain",
        "type_comments": [
            {
                "type": "() -> List[Union[_pytest.main.Session::object/_pytest.python.Function::object/_pytest.python.Module::object/_pytest.python.Package::object]]",
                "samples": 44
            },
            {
                "type": "() -> List[Union[_pytest.main.Session::object/_pytest.python.FunctionDefinition::object/_pytest.python.Module::object/_pytest.python.Package::object]]",
                "samples": 44
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 364,
        "func_name": "Node.iter_markers",
        "type_comments": [
            {
                "type": "(str) -> generator",
                "samples": 36
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 372,
        "func_name": "Node.iter_markers_with_node",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 36
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 414,
        "func_name": "Node.addfinalizer",
        "type_comments": [
            {
                "type": "(function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 423,
        "func_name": "Node.getparent",
        "type_comments": [
            {
                "type": "(_pytest.nodes.NodeMeta::type) -> None",
                "samples": 9
            },
            {
                "type": "(_pytest.nodes.NodeMeta::type) -> _pytest.python.Module::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 439,
        "func_name": "Node._repr_failure_py",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic, str) -> _pytest._code.code.ExceptionChainRepr::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 580,
        "func_name": "FSCollector.__init__",
        "type_comments": [
            {
                "type": "(None, None, pathlib.PosixPath, None, None, _pytest.config.Config::object, _pytest.main.Session::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, None, pathlib.PosixPath, None, _pytest.python.Package::object, None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, None, pathlib.PosixPath, None, _pytest.main.Session::object, None, _pytest.main.Session::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 634,
        "func_name": "from_parent",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object, None, pathlib.PosixPath) -> _pytest.python.Package::object",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Package::object, None, pathlib.PosixPath) -> _pytest.python.Module::object",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 670,
        "func_name": "Item.__init__",
        "type_comments": [
            {
                "type": "(str, _pytest.python.Module::object, None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 699,
        "func_name": "Item._check_item_and_collector_diamond_inheritance",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 737,
        "func_name": "Item.add_report_section",
        "type_comments": [
            {
                "type": "(str, str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 27
            }
        ],
        "samples": 27
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nodes.py",
        "line": 767,
        "func_name": "location",
        "type_comments": [
            {
                "type": "() -> Tuple[str/int/str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nose.py",
        "line": 12,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/nose.py",
        "line": 33,
        "func_name": "call_optional",
        "type_comments": [
            {
                "type": "(function, str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pastebin.py",
        "line": 18,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pastebin.py",
        "line": 31,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pastebin.py",
        "line": 52,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pastebin.py",
        "line": 94,
        "func_name": "pytest_terminal_summary",
        "type_comments": [
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 411,
        "func_name": "resolve_from_str",
        "type_comments": [
            {
                "type": "(str, pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 420,
        "func_name": "fnmatch_ex",
        "type_comments": [
            {
                "type": "(str, pathlib.PurePosixPath) -> bool",
                "samples": 65
            },
            {
                "type": "(str, pathlib.PosixPath) -> bool",
                "samples": 6
            }
        ],
        "samples": 71
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 486,
        "func_name": "import_path",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, str, pathlib.PosixPath) -> module",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 602,
        "func_name": "_is_same",
        "type_comments": [
            {
                "type": "(str, str) -> bool",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 656,
        "func_name": "resolve_package_path",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 710,
        "func_name": "absolutepath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 8
            },
            {
                "type": "(str) -> pathlib.PosixPath",
                "samples": 54
            }
        ],
        "samples": 62
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 719,
        "func_name": "commonpath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, pathlib.PosixPath) -> pathlib.PosixPath",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/pathlib.py",
        "line": 731,
        "func_name": "bestrelpath",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, pathlib.PosixPath) -> str",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 92,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 138,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 148,
        "func_name": "pytest_generate_tests",
        "type_comments": [
            {
                "type": "(_pytest.python.Metafunc::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 153,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 187,
        "func_name": "pytest_pyfunc_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 207,
        "func_name": "pytest_collect_file",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.main.Session::object) -> _pytest.python.Package::object",
                "samples": 2
            },
            {
                "type": "(pathlib.PosixPath, _pytest.python.Package::object) -> _pytest.python.Module::object",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 222,
        "func_name": "path_matches_patterns",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, List[str]) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 227,
        "func_name": "pytest_pycollect_makemodule",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, _pytest.main.Session::object) -> _pytest.python.Package::object",
                "samples": 2
            },
            {
                "type": "(pathlib.PosixPath, _pytest.python.Package::object) -> _pytest.python.Module::object",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 235,
        "func_name": "pytest_pycollect_makeitem",
        "type_comments": [
            {
                "type": "(_pytest.python.Module::object, str, module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Module::object, str, function) -> List[_pytest.python.Function::object]",
                "samples": 3
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 289,
        "func_name": "cls",
        "type_comments": [
            {
                "type": "() -> None",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 305,
        "func_name": "obj",
        "type_comments": [
            {
                "type": "() -> module",
                "samples": 50
            },
            {
                "type": "() -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 50
            },
            {
                "type": "() -> function",
                "samples": 50
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 320,
        "func_name": "obj",
        "type_comments": [
            {
                "type": "(function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 331,
        "func_name": "PyobjMixin.getmodpath",
        "type_comments": [
            {
                "type": "(bool, bool) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 348,
        "func_name": "PyobjMixin.reportinfo",
        "type_comments": [
            {
                "type": "() -> Tuple[pathlib.PosixPath/int/str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 388,
        "func_name": "PyCollector.funcnamefilter",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 391,
        "func_name": "PyCollector.isnosetest",
        "type_comments": [
            {
                "type": "(module) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 403,
        "func_name": "PyCollector.istestfunction",
        "type_comments": [
            {
                "type": "(module, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(function, str) -> bool",
                "samples": 3
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 415,
        "func_name": "PyCollector._matches_prefix_or_glob_option",
        "type_comments": [
            {
                "type": "(str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 430,
        "func_name": "PyCollector.collect",
        "type_comments": [
            {
                "type": "() -> List[_pytest.python.Function::object]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 473,
        "func_name": "PyCollector._genfunctions",
        "type_comments": [
            {
                "type": "(str, function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(str, function) -> Iterator[_pytest.python.Function::object]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 527,
        "func_name": "Module._getobj",
        "type_comments": [
            {
                "type": "() -> module",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 530,
        "func_name": "Module.collect",
        "type_comments": [
            {
                "type": "() -> List[_pytest.python.Function::object]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 536,
        "func_name": "Module._inject_setup_module_fixture",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 579,
        "func_name": "Module._inject_setup_function_fixture",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 613,
        "func_name": "Module._importtestmodule",
        "type_comments": [
            {
                "type": "() -> module",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 662,
        "func_name": "Package.__init__",
        "type_comments": [
            {
                "type": "(None, _pytest.main.Session::object, None, None, None, pathlib.PosixPath) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 686,
        "func_name": "Package.setup",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 711,
        "func_name": "Package._collectfile",
        "type_comments": [
            {
                "type": "(pathlib.PosixPath, bool) -> List[_pytest.python.Module::object]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 779,
        "func_name": "_get_first_non_fixture_func",
        "type_comments": [
            {
                "type": "(module, Tuple[str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "(module, Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 926,
        "func_name": "__getattr__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1191,
        "func_name": "Metafunc.__init__",
        "type_comments": [
            {
                "type": "(_pytest.python.FunctionDefinition::object, _pytest.fixtures.FuncFixtureInfo::object, _pytest.config.Config::object, None, module, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1707,
        "func_name": "Function.__init__",
        "type_comments": [
            {
                "type": "(str, _pytest.python.Module::object, None, None, function, None, None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(str, _pytest.python.Module::object, None, None, _pytest.compat.NotSetType, None, None, _pytest.fixtures.FuncFixtureInfo::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1758,
        "func_name": "from_parent",
        "type_comments": [
            {
                "type": "(_pytest.python.Module::object) -> _pytest.python.Function::object",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Module::object) -> _pytest.python.FunctionDefinition::object",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1763,
        "func_name": "Function._initrequest",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1772,
        "func_name": "Function._getobj",
        "type_comments": [
            {
                "type": "() -> function",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1786,
        "func_name": "Function.runtest",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1790,
        "func_name": "Function.setup",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1793,
        "func_name": "Function._traceback_filter",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.Traceback::list",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python.py",
        "line": 1822,
        "func_name": "Function.repr_failure",
        "type_comments": [
            {
                "type": "(_pytest._code.code.ExceptionInfo::typing.Generic) -> _pytest._code.code.ExceptionChainRepr::object",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python_path.py",
        "line": 8,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python_path.py",
        "line": 12,
        "func_name": "pytest_load_initial_conftests",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/python_path.py",
        "line": 19,
        "func_name": "pytest_unconfigure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 77,
        "func_name": "BaseReport.toterminal",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 146,
        "func_name": "passed",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 31
            }
        ],
        "samples": 31
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 151,
        "func_name": "failed",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 29
            }
        ],
        "samples": 29
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 156,
        "func_name": "skipped",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 31
            }
        ],
        "samples": 31
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 166,
        "func_name": "count_towards_summary",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 178,
        "func_name": "head_line",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 199,
        "func_name": "BaseReport._get_verbose_word",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 253,
        "func_name": "TestReport.__init__",
        "type_comments": [
            {
                "type": "(str, Tuple[str/int/str], Dict[str => int], str, None, str, List, float, float, float, List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(str, Tuple[str/int/str], Dict[str => int], str, _pytest._code.code.ExceptionChainRepr::object, str, List, float, float, float, List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 318,
        "func_name": "from_item_and_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> _pytest.reports.TestReport::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/reports.py",
        "line": 393,
        "func_name": "CollectReport.__init__",
        "type_comments": [
            {
                "type": "(str, str, None, List[_pytest.python.Function::object], Tuple[]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 50,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 71,
        "func_name": "pytest_terminal_summary",
        "type_comments": [
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 103,
        "func_name": "pytest_sessionstart",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 107,
        "func_name": "pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 111,
        "func_name": "pytest_runtest_protocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Function::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 119,
        "func_name": "runtestprotocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, bool, None) -> List[_pytest.reports.TestReport::object]",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Function::object, bool, _pytest.python.Function::object) -> List[_pytest.reports.TestReport::object]",
                "samples": 2
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 155,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 160,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 180,
        "func_name": "pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Function::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 186,
        "func_name": "_update_current_test_var",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            },
            {
                "type": "(_pytest.python.Function::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 203,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 219,
        "func_name": "call_and_report",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str, bool) -> _pytest.reports.TestReport::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 232,
        "func_name": "check_interactive_exception",
        "type_comments": [
            {
                "type": "(_pytest.runner.CallInfo::typing.Generic, _pytest.reports.CollectReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.runner.CallInfo::typing.Generic, _pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 247,
        "func_name": "call_runtest_hook",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str) -> _pytest.runner.CallInfo::typing.Generic",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 286,
        "func_name": "CallInfo.__init__",
        "type_comments": [
            {
                "type": "(List[_pytest.python.Function::object], None, float, float, float, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(None, _pytest._code.code.ExceptionInfo::typing.Generic, float, float, float, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(List, None, float, float, float, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 305,
        "func_name": "result",
        "type_comments": [
            {
                "type": "() -> List[_pytest.python.Function::object]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 318,
        "func_name": "from_call",
        "type_comments": [
            {
                "type": "(function, str, Tuple[type/type]) -> _pytest.runner.CallInfo::typing.Generic",
                "samples": 9
            },
            {
                "type": "(function, str, None) -> _pytest.runner.CallInfo::typing.Generic",
                "samples": 2
            },
            {
                "type": "(function, str, None) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 2
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 367,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> _pytest.reports.TestReport::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 371,
        "func_name": "pytest_make_collect_report",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Module::object) -> _pytest.reports.CollectReport::object",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 466,
        "func_name": "SetupState.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 478,
        "func_name": "SetupState.setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 499,
        "func_name": "SetupState.addfinalizer",
        "type_comments": [
            {
                "type": "(function, _pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 509,
        "func_name": "SetupState.teardown_exact",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/runner.py",
        "line": 544,
        "func_name": "collect_one_node",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(_pytest.python.Module::object) -> _pytest.reports.CollectReport::object",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/scope.py",
        "line": 42,
        "func_name": "Scope.next_lower",
        "type_comments": [
            {
                "type": "() -> _pytest.scope.Scope",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/scope.py",
        "line": 61,
        "func_name": "from_user",
        "type_comments": [
            {
                "type": "(str, str, None) -> _pytest.scope.Scope",
                "samples": 17
            }
        ],
        "samples": 17
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/setuponly.py",
        "line": 15,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/setuponly.py",
        "line": 93,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/setupplan.py",
        "line": 12,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/setupplan.py",
        "line": 35,
        "func_name": "pytest_cmdline_main",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 26,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 45,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 159,
        "func_name": "Skip",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 166,
        "func_name": "evaluate_skip_marks",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 194,
        "func_name": "Xfail",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 206,
        "func_name": "evaluate_xfail_marks",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 235,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 246,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 263,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/skipping.py",
        "line": 291,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 68,
        "func_name": "Stash.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 11
            }
        ],
        "samples": 11
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 71,
        "func_name": "Stash.__setitem__",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, Dict) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, _pytest.assertion.AssertionState::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 10
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, _pytest.logging.LogCaptureHandler::logging.StreamHandler) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 28
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 75,
        "func_name": "Stash.__getitem__",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> Dict",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> Dict[str => List]",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> Dict[str => bool]",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> None",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> _pytest.assertion.AssertionState::object",
                "samples": 61
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> int",
                "samples": 61
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 82,
        "func_name": "Stash.get",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, None) -> None",
                "samples": 19
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, bool) -> bool",
                "samples": 1
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, None) -> _pytest.assertion.AssertionState::object",
                "samples": 19
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 90,
        "func_name": "Stash.setdefault",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, Dict) -> Dict[str => bool]",
                "samples": 9
            },
            {
                "type": "(_pytest.stash.StashKey::typing.Generic, Dict) -> Dict",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 99,
        "func_name": "Stash.__delitem__",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stash.py",
        "line": 106,
        "func_name": "Stash.__contains__",
        "type_comments": [
            {
                "type": "(_pytest.stash.StashKey::typing.Generic) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stepwise.py",
        "line": 18,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stepwise.py",
        "line": 39,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stepwise.py",
        "line": 48,
        "func_name": "pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/stepwise.py",
        "line": 59,
        "func_name": "StepwisePlugin",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 86,
        "func_name": "MoreQuietAction.__init__",
        "type_comments": [
            {
                "type": "(List[str], str, int, bool, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 136,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 260,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 272,
        "func_name": "getreportopt",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 297,
        "func_name": "pytest_report_teststatus",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> Tuple[str/str/str]",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 344,
        "func_name": "TerminalReporter.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, _io.StringIO) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 370,
        "func_name": "TerminalReporter._determine_show_progress_info",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 391,
        "func_name": "verbosity",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 20
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 396,
        "func_name": "showheader",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 400,
        "func_name": "no_header",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 404,
        "func_name": "no_summary",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 408,
        "func_name": "showfspath",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 418,
        "func_name": "showlongtestinfo",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 422,
        "func_name": "TerminalReporter.hasopt",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 426,
        "func_name": "TerminalReporter.write_fspath_result",
        "type_comments": [
            {
                "type": "(str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 446,
        "func_name": "TerminalReporter.ensure_newline",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 16
            }
        ],
        "samples": 16
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 473,
        "func_name": "TerminalReporter.write",
        "type_comments": [
            {
                "type": "(str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 476,
        "func_name": "TerminalReporter.flush",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 479,
        "func_name": "TerminalReporter.write_line",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 503,
        "func_name": "TerminalReporter.write_sep",
        "type_comments": [
            {
                "type": "(str, str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(str, str, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 519,
        "func_name": "TerminalReporter._add_stats",
        "type_comments": [
            {
                "type": "(str, List[_pytest.reports.TestReport::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 545,
        "func_name": "TerminalReporter.pytest_plugin_registered",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 556,
        "func_name": "TerminalReporter.pytest_runtest_logstart",
        "type_comments": [
            {
                "type": "(str, Tuple[str/int/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 569,
        "func_name": "TerminalReporter.pytest_runtest_logreport",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 637,
        "func_name": "_is_last_item",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            },
            {
                "type": "() -> bool",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 642,
        "func_name": "TerminalReporter.pytest_runtest_logfinish",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 663,
        "func_name": "TerminalReporter._get_progress_information_message",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 680,
        "func_name": "TerminalReporter._write_progress_information_filling_space",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 687,
        "func_name": "_width_of_current_line",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 692,
        "func_name": "TerminalReporter.pytest_collection",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 700,
        "func_name": "TerminalReporter.pytest_collectreport",
        "type_comments": [
            {
                "type": "(_pytest.reports.CollectReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 710,
        "func_name": "TerminalReporter.report_collect",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 747,
        "func_name": "TerminalReporter.pytest_sessionstart",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 776,
        "func_name": "TerminalReporter._write_report_lines_from_hooks",
        "type_comments": [
            {
                "type": "(List[Union[List/List[str]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(List) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 786,
        "func_name": "TerminalReporter.pytest_report_header",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 801,
        "func_name": "TerminalReporter.pytest_collection_finish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 852,
        "func_name": "TerminalReporter.pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object, _pytest.config.ExitCode) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object, _pytest.config.ExitCode) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 879,
        "func_name": "TerminalReporter.pytest_terminal_summary",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 893,
        "func_name": "TerminalReporter.pytest_unconfigure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 936,
        "func_name": "TerminalReporter._getfailureheadline",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 954,
        "func_name": "TerminalReporter.getreports",
        "type_comments": [
            {
                "type": "(str) -> List[_pytest.reports.TestReport::object]",
                "samples": 5
            },
            {
                "type": "(str) -> List",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 957,
        "func_name": "TerminalReporter.summary_warnings",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1011,
        "func_name": "TerminalReporter.summary_passes",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1025,
        "func_name": "TerminalReporter._get_teardown_reports",
        "type_comments": [
            {
                "type": "(str) -> List[_pytest.reports.TestReport::object]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1033,
        "func_name": "TerminalReporter._handle_teardown_sections",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1037,
        "func_name": "TerminalReporter.print_teardown_sections",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1050,
        "func_name": "TerminalReporter.summary_failures",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1067,
        "func_name": "TerminalReporter.summary_errors",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1082,
        "func_name": "TerminalReporter._outrep_summary",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1095,
        "func_name": "TerminalReporter.summary_stats",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1132,
        "func_name": "TerminalReporter.short_test_summary",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1136,
        "func_name": "show_simple",
        "type_comments": [
            {
                "type": "(List, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(List[str], str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1214,
        "func_name": "TerminalReporter._get_main_color",
        "type_comments": [
            {
                "type": "() -> Tuple[str/List[str]]",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1221,
        "func_name": "TerminalReporter._determine_main_color",
        "type_comments": [
            {
                "type": "(bool) -> str",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1233,
        "func_name": "TerminalReporter._set_main_color",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1242,
        "func_name": "TerminalReporter.build_summary_stats_line",
        "type_comments": [
            {
                "type": "() -> Tuple[List[Tuple[str/Dict[str => bool]]]/str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1267,
        "func_name": "TerminalReporter._get_reports_to_display",
        "type_comments": [
            {
                "type": "(str) -> List",
                "samples": 8
            },
            {
                "type": "(str) -> List[_pytest.reports.TestReport::object]",
                "samples": 8
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1272,
        "func_name": "TerminalReporter._build_normal_summary_stats_line",
        "type_comments": [
            {
                "type": "() -> Tuple[List[Tuple[str/Dict[str => bool]]]/str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1324,
        "func_name": "_get_node_id_with_markup",
        "type_comments": [
            {
                "type": "(_pytest._io.terminalwriter.TerminalWriter::object, _pytest.config.Config::object, _pytest.reports.TestReport::object) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1334,
        "func_name": "_format_trimmed",
        "type_comments": [
            {
                "type": "(str, str, int) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1359,
        "func_name": "_get_line_with_reprcrash_message",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, _pytest.reports.TestReport::object, _pytest._io.terminalwriter.TerminalWriter::object, Dict[str => bool]) -> str",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1427,
        "func_name": "pluralize",
        "type_comments": [
            {
                "type": "(int, str) -> Tuple[int/str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1440,
        "func_name": "_plugin_nameversions",
        "type_comments": [
            {
                "type": "(List[Tuple[module/pluggy._manager.DistFacade]]) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/terminal.py",
        "line": 1454,
        "func_name": "format_session_duration",
        "type_comments": [
            {
                "type": "(float) -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 15,
        "func_name": "catch_threading_exception",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 36,
        "func_name": "catch_threading_exception.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 43,
        "func_name": "catch_threading_exception.__enter__",
        "type_comments": [
            {
                "type": "() -> _pytest.threadexception.catch_threading_exception::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 48,
        "func_name": "catch_threading_exception.__exit__",
        "type_comments": [
            {
                "type": "(None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 60,
        "func_name": "thread_exception_runtest_hook",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "() -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 76,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 81,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/threadexception.py",
        "line": 86,
        "func_name": "pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 59,
        "func_name": "TempPathFactory.__init__",
        "type_comments": [
            {
                "type": "(None, int, str, pluggy._tracing.TagTracerSub, None, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 82,
        "func_name": "from_config",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, bool) -> _pytest.tmpdir.TempPathFactory::object",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 216,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 229,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 293,
        "func_name": "pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object, _pytest.config.ExitCode) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/tmpdir.py",
        "line": 318,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unittest.py",
        "line": 44,
        "func_name": "pytest_pycollect_makeitem",
        "type_comments": [
            {
                "type": "(_pytest.python.Module::object, str, module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.python.Module::object, str, function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unittest.py",
        "line": 60,
        "func_name": "UnitTestCase",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unittest.py",
        "line": 183,
        "func_name": "TestCaseFunction",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unittest.py",
        "line": 349,
        "func_name": "pytest_runtest_makereport",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, _pytest.runner.CallInfo::typing.Generic) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unittest.py",
        "line": 379,
        "func_name": "pytest_runtest_protocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 15,
        "func_name": "catch_unraisable_exception",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 36,
        "func_name": "catch_unraisable_exception.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 45,
        "func_name": "catch_unraisable_exception.__enter__",
        "type_comments": [
            {
                "type": "() -> _pytest.unraisableexception.catch_unraisable_exception::object",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 50,
        "func_name": "catch_unraisable_exception.__exit__",
        "type_comments": [
            {
                "type": "(None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 62,
        "func_name": "unraisable_exception_runtest_hook",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "() -> Iterator",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 81,
        "func_name": "pytest_runtest_setup",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 86,
        "func_name": "pytest_runtest_call",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/unraisableexception.py",
        "line": 91,
        "func_name": "pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "() -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 20,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 28,
        "func_name": "catch_warnings_for_item",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, _pytest.config.compat.PathAwareHookProxy::object, str, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            },
            {
                "type": "(_pytest.config.Config::object, _pytest.config.compat.PathAwareHookProxy::object, str, _pytest.python.Function::object) -> Iterator",
                "samples": 6
            },
            {
                "type": "(_pytest.config.Config::object, _pytest.config.compat.PathAwareHookProxy::object, str, _pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.config.Config::object, _pytest.config.compat.PathAwareHookProxy::object, str, None) -> Iterator",
                "samples": 8
            }
        ],
        "samples": 14
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 104,
        "func_name": "pytest_runtest_protocol",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 112,
        "func_name": "pytest_collection",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 121,
        "func_name": "pytest_terminal_summary",
        "type_comments": [
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 132,
        "func_name": "pytest_sessionfinish",
        "type_comments": [
            {
                "type": "(_pytest.main.Session::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.main.Session::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/_pytest/warnings.py",
        "line": 141,
        "func_name": "pytest_load_initial_conftests",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.config.Config::object) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 39,
        "func_name": "SectionWrapper.__init__",
        "type_comments": [
            {
                "type": "(iniconfig.IniConfig, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 89,
        "func_name": "SectionWrapper.__getitem__",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 92,
        "func_name": "SectionWrapper.__iter__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator[str]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 95,
        "func_name": "lineof",
        "type_comments": [
            {
                "type": "(str) -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 100,
        "func_name": "SectionWrapper.items",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "() -> Iterator[Tuple[str/str]]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 109,
        "func_name": "IniConfig.__init__",
        "type_comments": [
            {
                "type": "(str, None, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 142,
        "func_name": "IniConfig.lineof",
        "type_comments": [
            {
                "type": "(str, str) -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 206,
        "func_name": "IniConfig.__getitem__",
        "type_comments": [
            {
                "type": "(str) -> iniconfig.SectionWrapper",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/__init__.py",
        "line": 215,
        "func_name": "IniConfig.__contains__",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/_parse.py",
        "line": 17,
        "func_name": "parse_lines",
        "type_comments": [
            {
                "type": "(str, List[str]) -> List[iniconfig._parse._ParsedLine]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/_parse.py",
        "line": 47,
        "func_name": "_parseline",
        "type_comments": [
            {
                "type": "(str, str, int) -> Tuple[str/str]",
                "samples": 2
            },
            {
                "type": "(str, str, int) -> Tuple[str/None]",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/iniconfig/_parse.py",
        "line": 80,
        "func_name": "iscommentline",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_asyncio_loop.py",
        "line": 5,
        "func_name": "load_loop_functions",
        "type_comments": [
            {
                "type": "() -> Tuple[function/builtin_function_or_method]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 32,
        "func_name": "SyntaxHighlighter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 61,
        "func_name": "SyntaxHighlighter.__init__",
        "type_comments": [
            {
                "type": "(None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 126,
        "func_name": "ExceptionFormatter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 143,
        "func_name": "ExceptionFormatter.__init__",
        "type_comments": [
            {
                "type": "(bool, bool, bool, None, None, int, str, str, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 169,
        "func_name": "_get_lib_dirs",
        "type_comments": [
            {
                "type": "() -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_better_exceptions.py",
        "line": 185,
        "func_name": "ExceptionFormatter._get_char",
        "type_comments": [
            {
                "type": "(str, str) -> str",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorama.py",
        "line": 6,
        "func_name": "should_colorize",
        "type_comments": [
            {
                "type": "(_pytest.capture.EncodedFile::_io.TextIOWrapper) -> bool",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 5,
        "func_name": "Style",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 18,
        "func_name": "Fore",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 39,
        "func_name": "Back",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 60,
        "func_name": "ansi_escape",
        "type_comments": [
            {
                "type": "(Dict[str => int]) -> Dict[str => str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 64,
        "func_name": "TokenType",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 71,
        "func_name": "AnsiParser",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 171,
        "func_name": "AnsiParser.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 15
            }
        ],
        "samples": 15
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 176,
        "func_name": "strip",
        "type_comments": [
            {
                "type": "(List[Tuple[int/str]]) -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 184,
        "func_name": "colorize",
        "type_comments": [
            {
                "type": "(List[Tuple[int/str]], None) -> str",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 216,
        "func_name": "AnsiParser.feed",
        "type_comments": [
            {
                "type": "(str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 23
            }
        ],
        "samples": 23
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 274,
        "func_name": "AnsiParser.done",
        "type_comments": [
            {
                "type": "(bool) -> List",
                "samples": 15
            },
            {
                "type": "(bool) -> List[Tuple[int/str]]",
                "samples": 15
            }
        ],
        "samples": 15
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 280,
        "func_name": "AnsiParser.current_color_tokens",
        "type_comments": [
            {
                "type": "() -> List[Tuple[int/None]]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 283,
        "func_name": "AnsiParser._get_ansicode",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 17
            }
        ],
        "samples": 17
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 321,
        "func_name": "ColoringMessage",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 328,
        "func_name": "ColoredMessage",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 337,
        "func_name": "ColoredFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 338,
        "func_name": "ColoredFormat.__init__",
        "type_comments": [
            {
                "type": "(List[Tuple[int/str]], List[List[Tuple[int/None]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 342,
        "func_name": "ColoredFormat.strip",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 364,
        "func_name": "Colorizer",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 365,
        "func_name": "prepare_format",
        "type_comments": [
            {
                "type": "(str) -> loguru._colorizer.ColoredFormat",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 382,
        "func_name": "ansify",
        "type_comments": [
            {
                "type": "(str) -> str",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_colorizer.py",
        "line": 445,
        "func_name": "_parse_without_formatting",
        "type_comments": [
            {
                "type": "(str, int, bool) -> Tuple[List/List]",
                "samples": 8
            },
            {
                "type": "(str, int, bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 8
            },
            {
                "type": "(str, int, bool) -> Tuple[List[Tuple[int/str]]/List]",
                "samples": 8
            }
        ],
        "samples": 8
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_contextvars.py",
        "line": 4,
        "func_name": "load_contextvar_class",
        "type_comments": [
            {
                "type": "() -> type",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_ctime_functions.py",
        "line": 4,
        "func_name": "load_ctime_functions",
        "type_comments": [
            {
                "type": "() -> Tuple[function/function]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_datetime.py",
        "line": 137,
        "func_name": "datetime",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_datetime.py",
        "line": 143,
        "func_name": "aware_now",
        "type_comments": [
            {
                "type": "() -> loguru._datetime.datetime",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_defaults.py",
        "line": 4,
        "func_name": "env",
        "type_comments": [
            {
                "type": "(str, type, None) -> None",
                "samples": 3
            },
            {
                "type": "(str, type, bool) -> bool",
                "samples": 6
            },
            {
                "type": "(str, type, str) -> str",
                "samples": 16
            },
            {
                "type": "(str, type, int) -> int",
                "samples": 7
            }
        ],
        "samples": 32
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_error_interceptor.py",
        "line": 5,
        "func_name": "ErrorInterceptor",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_error_interceptor.py",
        "line": 6,
        "func_name": "ErrorInterceptor.__init__",
        "type_comments": [
            {
                "type": "(bool, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 30,
        "func_name": "FileDateFormatter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 40,
        "func_name": "Compression",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 70,
        "func_name": "Retention",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 87,
        "func_name": "Rotation",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 108,
        "func_name": "RotationTime",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_file_sink.py",
        "line": 157,
        "func_name": "FileSink",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_get_frame.py",
        "line": 15,
        "func_name": "load_get_frame_function",
        "type_comments": [
            {
                "type": "() -> builtin_function_or_method",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_handler.py",
        "line": 27,
        "func_name": "Message",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_handler.py",
        "line": 31,
        "func_name": "Handler",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_handler.py",
        "line": 32,
        "func_name": "Handler.__init__",
        "type_comments": [
            {
                "type": "(loguru._simple_sinks.StreamSink, str, int, loguru._colorizer.ColoredFormat, bool, None, bool, bool, bool, None, loguru._error_interceptor.ErrorInterceptor, loguru._better_exceptions.ExceptionFormatter, int, Dict[str => str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_locks_machinery.py",
        "line": 42,
        "func_name": "create_logger_lock",
        "type_comments": [
            {
                "type": "() -> _thread.lock",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_locks_machinery.py",
        "line": 47,
        "func_name": "create_handler_lock",
        "type_comments": [
            {
                "type": "() -> _thread.lock",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 128,
        "func_name": "Core",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 129,
        "func_name": "Core.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 213,
        "func_name": "Logger",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 236,
        "func_name": "Logger.__init__",
        "type_comments": [
            {
                "type": "(loguru._logger.Core, None, int, bool, bool, bool, bool, bool, List, Dict) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 243,
        "func_name": "Logger.add",
        "type_comments": [
            {
                "type": "(_pytest.capture.EncodedFile::_io.TextIOWrapper, str, str, None, None, bool, bool, bool, bool, None, bool) -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_logger.py",
        "line": 1535,
        "func_name": "Logger.level",
        "type_comments": [
            {
                "type": "(str, None, None, None) -> loguru._logger.Level",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_recattrs.py",
        "line": 5,
        "func_name": "RecordLevel",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_recattrs.py",
        "line": 20,
        "func_name": "RecordFile",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_recattrs.py",
        "line": 34,
        "func_name": "RecordThread",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_recattrs.py",
        "line": 48,
        "func_name": "RecordProcess",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_recattrs.py",
        "line": 62,
        "func_name": "RecordException",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_simple_sinks.py",
        "line": 8,
        "func_name": "StreamSink",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_simple_sinks.py",
        "line": 9,
        "func_name": "StreamSink.__init__",
        "type_comments": [
            {
                "type": "(_pytest.capture.EncodedFile::_io.TextIOWrapper) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_simple_sinks.py",
        "line": 30,
        "func_name": "StandardSink",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_simple_sinks.py",
        "line": 61,
        "func_name": "AsyncSink",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_simple_sinks.py",
        "line": 118,
        "func_name": "CallableSink",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/loguru/_string_parsers.py",
        "line": 5,
        "func_name": "Frequencies",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/__config__.py",
        "line": 14,
        "func_name": "DisplayModes",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/__config__.py",
        "line": 19,
        "func_name": "_cleanup",
        "type_comments": [
            {
                "type": "(bool) -> bool",
                "samples": 2
            },
            {
                "type": "(Dict[str => Dict[str => str]]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(Dict[str => str]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 7
            },
            {
                "type": "(Dict[str => Dict[str => Union[Dict[str => Union[bool/str]]/List[str]/bool/str]]]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[bool/str]]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str) -> str",
                "samples": 63
            }
        ],
        "samples": 75
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/__init__.py",
        "line": 812,
        "func_name": "_sanity_check",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/__init__.py",
        "line": 876,
        "func_name": "hugepage_setup",
        "type_comments": [
            {
                "type": "() -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_array_api_info.py",
        "line": 29,
        "func_name": "__array_namespace_info__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/__init__.py",
        "line": 163,
        "func_name": "__getattr__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_add_newdocs.py",
        "line": 6629,
        "func_name": "refer_to_array_attribute",
        "type_comments": [
            {
                "type": "(str, bool) -> Tuple[str/str]",
                "samples": 50
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_add_newdocs_scalars.py",
        "line": 19,
        "func_name": "numeric_type_aliases",
        "type_comments": [
            {
                "type": "(List[Tuple[str/str]]) -> List[Tuple[type/str/str]]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_add_newdocs_scalars.py",
        "line": 20,
        "func_name": "type_aliases_gen",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 18
            },
            {
                "type": "() -> Iterator[Tuple[type/str/str]]",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_add_newdocs_scalars.py",
        "line": 55,
        "func_name": "_get_platform_and_machine",
        "type_comments": [
            {
                "type": "() -> Tuple[str/str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_add_newdocs_scalars.py",
        "line": 72,
        "func_name": "add_newdoc_for_scalar_type",
        "type_comments": [
            {
                "type": "(str, List, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 25
            }
        ],
        "samples": 25
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 16,
        "func_name": "_display_as_base",
        "type_comments": [
            {
                "type": "() -> type",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 31,
        "func_name": "UFuncTypeError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 37,
        "func_name": "_UFuncNoLoopError",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 52,
        "func_name": "_UFuncBinaryResolutionError",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 67,
        "func_name": "_UFuncCastingError",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 76,
        "func_name": "_UFuncInputCastingError",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 92,
        "func_name": "_UFuncOutputCastingError",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
        "line": 108,
        "func_name": "_ArrayMemoryError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_internal.py",
        "line": 211,
        "func_name": "dummy_ctype",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_internal.py",
        "line": 253,
        "func_name": "_missing_ctypes",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_internal.py",
        "line": 257,
        "func_name": "c_void_p",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_internal.py",
        "line": 262,
        "func_name": "_ctypes",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_internal.py",
        "line": 631,
        "func_name": "_Stream",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_machar.py",
        "line": 16,
        "func_name": "MachAr",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_ufunc_config.py",
        "line": 355,
        "func_name": "_unspecified",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_ufunc_config.py",
        "line": 362,
        "func_name": "errstate",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_ufunc_config.py",
        "line": 436,
        "func_name": "errstate.__init__",
        "type_comments": [
            {
                "type": "(numpy._core._ufunc_config._unspecified, str, None, None, None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_ufunc_config.py",
        "line": 446,
        "func_name": "errstate.__enter__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/_ufunc_config.py",
        "line": 462,
        "func_name": "errstate.__exit__",
        "type_comments": [
            {
                "type": "(*None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 551,
        "func_name": "_recursive_guard",
        "type_comments": [
            {
                "type": "(str) -> function",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 561,
        "func_name": "decorating_function",
        "type_comments": [
            {
                "type": "(function) -> function",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 564,
        "func_name": "wrapper",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 973,
        "func_name": "FloatingFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1300,
        "func_name": "IntegerFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1319,
        "func_name": "BoolFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1329,
        "func_name": "ComplexFloatingFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1362,
        "func_name": "_TimelikeFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1388,
        "func_name": "DatetimeFormat",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1420,
        "func_name": "TimedeltaFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1425,
        "func_name": "SubArrayFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1451,
        "func_name": "StructuredVoidFormat",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1697,
        "func_name": "_guarded_repr_or_str",
        "type_comments": [
            {
                "type": "(numpy.longdouble) -> str",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
        "line": 1704,
        "func_name": "_array_str_implementation",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<longdouble>>, None, None, None, function) -> str",
                "samples": 18
            }
        ],
        "samples": 18
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/function_base.py",
        "line": 455,
        "func_name": "_needs_add_docstring",
        "type_comments": [
            {
                "type": "(builtin_function_or_method) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 25
            },
            {
                "type": "(type) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(getset_descriptor) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            },
            {
                "type": "(member_descriptor) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(method_descriptor) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 25
            }
        ],
        "samples": 74
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/function_base.py",
        "line": 473,
        "func_name": "_add_docstring",
        "type_comments": [
            {
                "type": "(builtin_function_or_method, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 25
            },
            {
                "type": "(type, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            },
            {
                "type": "(getset_descriptor, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 12
            },
            {
                "type": "(member_descriptor, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            },
            {
                "type": "(method_descriptor, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 25
            }
        ],
        "samples": 74
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/function_base.py",
        "line": 486,
        "func_name": "add_newdoc",
        "type_comments": [
            {
                "type": "(str, str, str, bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 32
            },
            {
                "type": "(str, str, Tuple[str/str], bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 42
            }
        ],
        "samples": 74
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 18,
        "func_name": "_fr0",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<longdouble>>) -> numpy.ndarray<<longdouble>>",
                "samples": 18
            },
            {
                "type": "(numpy.ndarray<<float64>>) -> numpy.ndarray<<float64>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float16>>) -> numpy.ndarray<<float16>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float32>>) -> numpy.ndarray<<float32>>",
                "samples": 6
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 26,
        "func_name": "_fr1",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<longdouble>>) -> numpy.ndarray<<longdouble>>",
                "samples": 18
            },
            {
                "type": "(numpy.ndarray<<float64>>) -> numpy.ndarray<<float64>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float16>>) -> numpy.ndarray<<float16>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float32>>) -> numpy.ndarray<<float32>>",
                "samples": 6
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 34,
        "func_name": "MachArLike",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 36,
        "func_name": "MachArLike.__init__",
        "type_comments": [
            {
                "type": "(type, numpy.longdouble, numpy.longdouble, numpy.longdouble, float, int, numpy.longdouble) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, numpy.float16, numpy.float16, numpy.float16, numpy.float16, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, float, float, numpy.float64, float, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, numpy.float32, numpy.float32, numpy.float32, numpy.float32, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(type, numpy.longdouble, numpy.longdouble, numpy.longdouble, numpy.longdouble, int, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 93,
        "func_name": "MachArLike._float_to_float",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<float16>>) -> numpy.ndarray<<float16>>",
                "samples": 1
            },
            {
                "type": "(numpy.float16) -> numpy.ndarray<<float16>>",
                "samples": 5
            },
            {
                "type": "(float) -> numpy.ndarray<<float64>>",
                "samples": 6
            },
            {
                "type": "(numpy.float64) -> numpy.ndarray<<float64>>",
                "samples": 1
            },
            {
                "type": "(numpy.ndarray<<float32>>) -> numpy.ndarray<<float32>>",
                "samples": 1
            },
            {
                "type": "(numpy.ndarray<<float64>>) -> numpy.ndarray<<float64>>",
                "samples": 1
            },
            {
                "type": "(numpy.longdouble) -> numpy.ndarray<<longdouble>>",
                "samples": 13
            },
            {
                "type": "(numpy.ndarray<<longdouble>>) -> numpy.ndarray<<longdouble>>",
                "samples": 3
            },
            {
                "type": "(float) -> numpy.ndarray<<longdouble>>",
                "samples": 6
            },
            {
                "type": "(numpy.float32) -> numpy.ndarray<<float32>>",
                "samples": 5
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 103,
        "func_name": "MachArLike._float_conv",
        "type_comments": [
            {
                "type": "(int) -> numpy.ndarray<<float16>>",
                "samples": 6
            },
            {
                "type": "(numpy.float16) -> numpy.ndarray<<float16>>",
                "samples": 5
            },
            {
                "type": "(numpy.ndarray<<float16>>) -> numpy.ndarray<<float16>>",
                "samples": 1
            },
            {
                "type": "(float) -> numpy.ndarray<<float64>>",
                "samples": 6
            },
            {
                "type": "(numpy.float64) -> numpy.ndarray<<float64>>",
                "samples": 1
            },
            {
                "type": "(numpy.float32) -> numpy.ndarray<<float32>>",
                "samples": 5
            },
            {
                "type": "(numpy.ndarray<<float32>>) -> numpy.ndarray<<float32>>",
                "samples": 1
            },
            {
                "type": "(int) -> numpy.ndarray<<float64>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float64>>) -> numpy.ndarray<<float64>>",
                "samples": 1
            },
            {
                "type": "(numpy.longdouble) -> numpy.ndarray<<longdouble>>",
                "samples": 13
            },
            {
                "type": "(int) -> numpy.ndarray<<longdouble>>",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<longdouble>>) -> numpy.ndarray<<longdouble>>",
                "samples": 3
            },
            {
                "type": "(float) -> numpy.ndarray<<longdouble>>",
                "samples": 6
            },
            {
                "type": "(int) -> numpy.ndarray<<float32>>",
                "samples": 6
            }
        ],
        "samples": 42
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 113,
        "func_name": "MachArLike._float_to_str",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<float32>>) -> str",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<longdouble>>) -> str",
                "samples": 18
            },
            {
                "type": "(numpy.ndarray<<float16>>) -> str",
                "samples": 6
            },
            {
                "type": "(numpy.ndarray<<float64>>) -> str",
                "samples": 6
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 161,
        "func_name": "_register_type",
        "type_comments": [
            {
                "type": "(numpy._core.getlimits.MachArLike, bytes) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 7
            }
        ],
        "samples": 7
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 168,
        "func_name": "_register_known_types",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 385,
        "func_name": "finfo",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 640,
        "func_name": "iinfo",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/getlimits.py",
        "line": 698,
        "func_name": "iinfo.__init__",
        "type_comments": [
            {
                "type": "(type) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/memmap.py",
        "line": 23,
        "func_name": "memmap",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/multiarray.py",
        "line": 81,
        "func_name": "_override___module__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/multiarray.py",
        "line": 1106,
        "func_name": "copyto",
        "type_comments": [
            {
                "type": "(numpy.ndarray<<float32>>, int, str, None) -> Tuple[numpy.ndarray<<float32>>/int/None]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/numeric.py",
        "line": 171,
        "func_name": "ones",
        "type_comments": [
            {
                "type": "(int, type, str, None, None) -> numpy.ndarray<<float32>>",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/numeric.py",
        "line": 2739,
        "func_name": "extend_all",
        "type_comments": [
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/numerictypes.py",
        "line": 368,
        "func_name": "_PreprocessDTypeError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/numerictypes.py",
        "line": 594,
        "func_name": "_scalar_type_key",
        "type_comments": [
            {
                "type": "(type) -> Tuple[str/int]",
                "samples": 24
            }
        ],
        "samples": 24
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/numerictypes.py",
        "line": 626,
        "func_name": "_register_types",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 24,
        "func_name": "get_array_function_like_doc",
        "type_comments": [
            {
                "type": "(builtin_function_or_method, str) -> str",
                "samples": 12
            },
            {
                "type": "(function, str) -> str",
                "samples": 9
            }
        ],
        "samples": 21
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 29,
        "func_name": "finalize_array_function_like",
        "type_comments": [
            {
                "type": "(function) -> function",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 85,
        "func_name": "verify_matching_signatures",
        "type_comments": [
            {
                "type": "(function, function) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 66
            }
        ],
        "samples": 66
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 107,
        "func_name": "array_function_dispatch",
        "type_comments": [
            {
                "type": "(function, None, bool, bool) -> function",
                "samples": 1
            },
            {
                "type": "(function, str, bool, bool) -> function",
                "samples": 69
            }
        ],
        "samples": 70
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 144,
        "func_name": "decorator",
        "type_comments": [
            {
                "type": "(builtin_function_or_method) -> numpy._ArrayFunctionDispatcher",
                "samples": 23
            },
            {
                "type": "(function) -> numpy._ArrayFunctionDispatcher",
                "samples": 47
            }
        ],
        "samples": 70
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 175,
        "func_name": "array_function_from_dispatcher",
        "type_comments": [
            {
                "type": "(builtin_function_or_method, str, bool, bool) -> function",
                "samples": 23
            }
        ],
        "samples": 23
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/overrides.py",
        "line": 179,
        "func_name": "decorator",
        "type_comments": [
            {
                "type": "(function) -> numpy._ArrayFunctionDispatcher",
                "samples": 23
            }
        ],
        "samples": 23
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/records.py",
        "line": 57,
        "func_name": "format_parser",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/records.py",
        "line": 197,
        "func_name": "record",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_core/records.py",
        "line": 280,
        "func_name": "recarray",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_globals.py",
        "line": 32,
        "func_name": "_NoValueType",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_globals.py",
        "line": 53,
        "func_name": "__new__",
        "type_comments": [
            {
                "type": "() -> numpy._globals._NoValueType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_globals.py",
        "line": 66,
        "func_name": "_CopyMode",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_pytesttester.py",
        "line": 45,
        "func_name": "PytestTester",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_pytesttester.py",
        "line": 75,
        "func_name": "PytestTester.__init__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_array_like.py",
        "line": 31,
        "func_name": "_SupportsArray",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_array_like.py",
        "line": 36,
        "func_name": "_SupportsArrayFunc",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_dtype_like.py",
        "line": 35,
        "func_name": "_DTypeDictBase",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_dtype_like.py",
        "line": 41,
        "func_name": "_DTypeDict",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_dtype_like.py",
        "line": 51,
        "func_name": "_SupportsDType",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 7,
        "func_name": "NBitBase",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 57,
        "func_name": "__init_subclass__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 65,
        "func_name": "_128Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 71,
        "func_name": "_96Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 76,
        "func_name": "_64Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 81,
        "func_name": "_32Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 86,
        "func_name": "_16Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nbit_base.py",
        "line": 91,
        "func_name": "_8Bit",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_typing/_nested_sequence.py",
        "line": 13,
        "func_name": "_NestedSequence",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/__init__.py",
        "line": 17,
        "func_name": "set_module",
        "type_comments": [
            {
                "type": "(str) -> function",
                "samples": 54
            }
        ],
        "samples": 54
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/__init__.py",
        "line": 28,
        "func_name": "decorator",
        "type_comments": [
            {
                "type": "(enum.EnumType) -> enum.EnumType",
                "samples": 1
            },
            {
                "type": "(type) -> type",
                "samples": 13
            },
            {
                "type": "(numpy._ArrayFunctionDispatcher) -> numpy._ArrayFunctionDispatcher",
                "samples": 1
            },
            {
                "type": "(function) -> function",
                "samples": 39
            }
        ],
        "samples": 54
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/_inspect.py",
        "line": 13,
        "func_name": "ismethod",
        "type_comments": [
            {
                "type": "(function) -> bool",
                "samples": 81
            }
        ],
        "samples": 81
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/_inspect.py",
        "line": 26,
        "func_name": "isfunction",
        "type_comments": [
            {
                "type": "(function) -> bool",
                "samples": 81
            }
        ],
        "samples": 81
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/_inspect.py",
        "line": 41,
        "func_name": "iscode",
        "type_comments": [
            {
                "type": "(code) -> bool",
                "samples": 81
            }
        ],
        "samples": 81
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/_inspect.py",
        "line": 66,
        "func_name": "getargs",
        "type_comments": [
            {
                "type": "(code) -> Tuple[List[str]/None/None]",
                "samples": 81
            },
            {
                "type": "(code) -> Tuple[List/str/str]",
                "samples": 81
            },
            {
                "type": "(code) -> Tuple[List[str]/None/str]",
                "samples": 81
            }
        ],
        "samples": 81
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/_utils/_inspect.py",
        "line": 97,
        "func_name": "getargspec",
        "type_comments": [
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/str]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/str/Tuple[None/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/None/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/bool/bool]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/numpy._globals._NoValueType/numpy._globals._NoValueType/numpy._globals._NoValueType]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/str/Tuple[numpy._globals._NoValueType/numpy._globals._NoValueType/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/str]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/None/None/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/None/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/None/numpy._globals._NoValueType/numpy._globals._NoValueType/numpy._globals._NoValueType]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/str/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/int/int/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/int/int]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None/None/bool/str/numpy._globals._NoValueType]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List/str/str/None]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[bool]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[int/int/int/None/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[str/None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[None]]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/None]",
                "samples": 81
            },
            {
                "type": "(function) -> Tuple[List[str]/None/None/Tuple[str]]",
                "samples": 81
            }
        ],
        "samples": 81
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/dtypes.py",
        "line": 30,
        "func_name": "_add_dtype_helper",
        "type_comments": [
            {
                "type": "(numpy._DTypeMeta, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 17
            },
            {
                "type": "(numpy._DTypeMeta, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            }
        ],
        "samples": 25
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 48,
        "func_name": "ComplexWarning",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 59,
        "func_name": "ModuleDeprecationWarning",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 76,
        "func_name": "VisibleDeprecationWarning",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 87,
        "func_name": "RankWarning",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 97,
        "func_name": "TooHardError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 109,
        "func_name": "AxisError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/exceptions.py",
        "line": 200,
        "func_name": "DTypePromotionError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_arraysetops_impl.py",
        "line": 416,
        "func_name": "UniqueAllResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_arraysetops_impl.py",
        "line": 423,
        "func_name": "UniqueCountsResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_arraysetops_impl.py",
        "line": 428,
        "func_name": "UniqueInverseResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_arrayterator_impl.py",
        "line": 16,
        "func_name": "Arrayterator",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_datasource.py",
        "line": 72,
        "func_name": "_FileOpeners",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_datasource.py",
        "line": 97,
        "func_name": "_FileOpeners.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_datasource.py",
        "line": 195,
        "func_name": "DataSource",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_datasource.py",
        "line": 532,
        "func_name": "Repository",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_function_base_impl.py",
        "line": 2293,
        "func_name": "vectorize",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 108,
        "func_name": "nd_grid",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 144,
        "func_name": "nd_grid.__init__",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 212,
        "func_name": "MGridClass",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 267,
        "func_name": "MGridClass.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 274,
        "func_name": "OGridClass",
        "type_comments": [
            {
                "type": "() -> cell",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 319,
        "func_name": "OGridClass.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 326,
        "func_name": "AxisConcatenator",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 338,
        "func_name": "AxisConcatenator.__init__",
        "type_comments": [
            {
                "type": "(int, bool, int, int) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 453,
        "func_name": "RClass",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 550,
        "func_name": "RClass.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 557,
        "func_name": "CClass",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 584,
        "func_name": "CClass.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 591,
        "func_name": "ndenumerate",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 641,
        "func_name": "ndindex",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 742,
        "func_name": "IndexExpression",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
        "line": 789,
        "func_name": "IndexExpression.__init__",
        "type_comments": [
            {
                "type": "(bool) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 133,
        "func_name": "LineSplitter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 229,
        "func_name": "NameValidator",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 423,
        "func_name": "ConverterError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 431,
        "func_name": "ConverterLockError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 439,
        "func_name": "ConversionWarning",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_iotools.py",
        "line": 452,
        "func_name": "StringConverter",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
        "line": 50,
        "func_name": "BagObj",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
        "line": 115,
        "func_name": "NpzFile",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_polynomial_impl.py",
        "line": 1093,
        "func_name": "poly1d",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_stride_tricks_impl.py",
        "line": 14,
        "func_name": "DummyArray",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
        "line": 121,
        "func_name": "_Deprecate",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/_version.py",
        "line": 13,
        "func_name": "NumpyVersion",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 16,
        "func_name": "_binary_method",
        "type_comments": [
            {
                "type": "(numpy.ufunc, str) -> function",
                "samples": 20
            }
        ],
        "samples": 20
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 26,
        "func_name": "_reflected_binary_method",
        "type_comments": [
            {
                "type": "(numpy.ufunc, str) -> function",
                "samples": 14
            }
        ],
        "samples": 14
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 36,
        "func_name": "_inplace_binary_method",
        "type_comments": [
            {
                "type": "(numpy.ufunc, str) -> function",
                "samples": 13
            }
        ],
        "samples": 13
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 44,
        "func_name": "_numeric_methods",
        "type_comments": [
            {
                "type": "(numpy.ufunc, str) -> Tuple[function/function/function]",
                "samples": 13
            }
        ],
        "samples": 13
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 51,
        "func_name": "_unary_method",
        "type_comments": [
            {
                "type": "(numpy.ufunc, str) -> function",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/lib/mixins.py",
        "line": 59,
        "func_name": "NDArrayOperatorsMixin",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 102,
        "func_name": "EigResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 106,
        "func_name": "EighResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 110,
        "func_name": "QRResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 114,
        "func_name": "SlogdetResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 118,
        "func_name": "SVDResult",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/linalg/_linalg.py",
        "line": 132,
        "func_name": "LinAlgError",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/numpy/matrixlib/defmatrix.py",
        "line": 73,
        "func_name": "matrix",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_callers.py",
        "line": 25,
        "func_name": "run_old_style_hookwrapper",
        "type_comments": [
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.python.Function::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 21
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.config.Config::object]) -> Iterator",
                "samples": 4
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List) -> Iterator",
                "samples": 18
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.config.Config::object]) -> Iterator",
                "samples": 4
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.main.Session::object]) -> Iterator",
                "samples": 5
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List) -> Iterator",
                "samples": 18
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.python.Module::object]) -> Iterator",
                "samples": 2
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.python.Module::object]) -> Iterator",
                "samples": 2
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.main.Session::object]) -> Iterator",
                "samples": 5
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[List[_pytest.python.Function::object]]) -> Iterator",
                "samples": 2
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[Union[List[_pytest.python.Function::object]/_pytest.config.Config::object]]) -> Iterator",
                "samples": 2
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[List[_pytest.python.Function::object]]) -> Iterator",
                "samples": 2
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.python.Function::object]) -> Iterator",
                "samples": 21
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[_pytest.python.Function::object]) -> Iterator",
                "samples": 21
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[Union[_pytest.python.Function::object/_pytest.runner.CallInfo::typing.Generic]]) -> Iterator",
                "samples": 8
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[Union[_pytest.python.Function::object/_pytest.runner.CallInfo::typing.Generic]]) -> Iterator",
                "samples": 8
            },
            {
                "type": "(pluggy._hooks.HookImpl, str, List[Union[List[_pytest.python.Function::object]/_pytest.config.Config::object]]) -> Iterator",
                "samples": 2
            }
        ],
        "samples": 62
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_callers.py",
        "line": 76,
        "func_name": "_multicall",
        "type_comments": [
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]], bool) -> List",
                "samples": 15
            },
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]], bool) -> List",
                "samples": 11
            },
            {
                "type": "(str, List, Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> List",
                "samples": 2
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]], bool) -> List",
                "samples": 26
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[List[str]/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.main.Session::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest._py.path.LocalPath::object/_pytest.main.Session::object/pathlib.PosixPath]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Module::object/function/str]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[List[_pytest.python.Function::object]/_pytest._py.path.LocalPath::object/_pytest.config.Config::object/pathlib.PosixPath]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[Tuple[str/int/str]/str]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Function::object/_pytest.reports.TestReport::object/_pytest.runner.CallInfo::typing.Generic]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => _pytest.reports.TestReport::object], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.logging.LoggingPlugin::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Function::object/_pytest.runner.CallInfo::typing.Generic]], bool) -> _pytest.reports.TestReport::object",
                "samples": 1
            }
        ],
        "samples": 68
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 202,
        "func_name": "HookimplMarker.__call__",
        "type_comments": [
            {
                "type": "(function, bool, bool, bool, bool, None, bool) -> function",
                "samples": 4
            },
            {
                "type": "(None, bool, bool, bool, bool, None, bool) -> function",
                "samples": 32
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 263,
        "func_name": "setattr_hookimpl_opts",
        "type_comments": [
            {
                "type": "(function) -> function",
                "samples": 36
            }
        ],
        "samples": 36
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 281,
        "func_name": "normalize_hookimpl_opts",
        "type_comments": [
            {
                "type": "(Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 293,
        "func_name": "varnames",
        "type_comments": [
            {
                "type": "(function) -> Tuple[Tuple[str/str]/Tuple[]]",
                "samples": 60
            },
            {
                "type": "(function) -> Tuple[Tuple[str]/Tuple[]]",
                "samples": 60
            },
            {
                "type": "(method) -> Tuple[Tuple[str]/Tuple[]]",
                "samples": 6
            },
            {
                "type": "(function) -> Tuple[Tuple[]/Tuple[]]",
                "samples": 60
            },
            {
                "type": "(method) -> Tuple[Tuple[]/Tuple[]]",
                "samples": 6
            },
            {
                "type": "(function) -> Tuple[Tuple[str/str/str]/Tuple[]]",
                "samples": 60
            },
            {
                "type": "(function) -> Tuple[Tuple[str/str/str/str]/Tuple[]]",
                "samples": 60
            }
        ],
        "samples": 66
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 365,
        "func_name": "HookRelay.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 391,
        "func_name": "HookCaller.__init__",
        "type_comments": [
            {
                "type": "(str, method, module, Dict[str => Optional[bool]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 20
            },
            {
                "type": "(str, method, module, Dict[str => Optional[Union[bool/pytest.PytestRemovedIn8Warning::UserWarning]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(str, method, module, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 29
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 418,
        "func_name": "HookCaller.has_spec",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 66
            }
        ],
        "samples": 66
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 422,
        "func_name": "HookCaller.set_specification",
        "type_comments": [
            {
                "type": "(module, Dict[str => Optional[bool]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 20
            },
            {
                "type": "(module, Dict[str => Optional[Union[bool/pytest.PytestRemovedIn8Warning::UserWarning]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 29
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 436,
        "func_name": "HookCaller.is_historic",
        "type_comments": [
            {
                "type": "() -> bool",
                "samples": 80
            }
        ],
        "samples": 80
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 447,
        "func_name": "HookCaller.get_hookimpls",
        "type_comments": [
            {
                "type": "() -> List",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 451,
        "func_name": "HookCaller._add_hookimpl",
        "type_comments": [
            {
                "type": "(pluggy._hooks.HookImpl) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 478,
        "func_name": "HookCaller._verify_all_args_are_provided",
        "type_comments": [
            {
                "type": "(Dict[str => Union[_pytest.python.Function::object/_pytest.reports.TestReport::object/_pytest.runner.CallInfo::typing.Generic]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => _pytest.reports.TestReport::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(Dict[str => Union[List[str]/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(Dict[str => Union[List[str]/_pytest.config.Config::object/_pytest.config.argparsing.Parser::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.capture.CaptureManager::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[List[str]/_pytest.config.Config::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => _pytest.config.Config::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.main.Session::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.cacheprovider.LFPlugin::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.cacheprovider.NFPlugin::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/pytest_timeouts.TimeoutsPlugin::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/type]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.terminal.TerminalReporter::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.logging.LoggingPlugin::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => _pytest.main.Session::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.python.Module::object/function/str]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[_pytest.python.Function::object/_pytest.runner.CallInfo::typing.Generic]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Dict[str => Union[Tuple[str/int/str]/str]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 57
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 497,
        "func_name": "HookCaller.__call__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 53
            },
            {
                "type": "() -> List[Union[List/List[str]]]",
                "samples": 53
            },
            {
                "type": "() -> List",
                "samples": 53
            },
            {
                "type": "() -> _pytest.python.Package::object",
                "samples": 53
            },
            {
                "type": "() -> _pytest.python.Module::object",
                "samples": 53
            },
            {
                "type": "() -> List[_pytest.python.Function::object]",
                "samples": 53
            },
            {
                "type": "() -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 53
            },
            {
                "type": "() -> None",
                "samples": 53
            },
            {
                "type": "() -> Tuple[str/str/str]",
                "samples": 53
            },
            {
                "type": "() -> _pytest.reports.TestReport::object",
                "samples": 53
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 514,
        "func_name": "HookCaller.call_historic",
        "type_comments": [
            {
                "type": "(None, Dict[str => Union[_pytest.capture.CaptureManager::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 33
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.main.Session::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.cacheprovider.LFPlugin::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.cacheprovider.NFPlugin::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/pytest_timeouts.TimeoutsPlugin::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/type]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => _pytest.config.Config::object]) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.terminal.TerminalReporter::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.logging.LoggingPlugin::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.fixtures.FixtureManager::object]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 47
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 541,
        "func_name": "HookCaller.call_extra",
        "type_comments": [
            {
                "type": "(List, Dict[str => _pytest.python.Metafunc::object]) -> List",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 575,
        "func_name": "HookCaller._maybe_apply_history",
        "type_comments": [
            {
                "type": "(pluggy._hooks.HookImpl) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 654,
        "func_name": "HookImpl.__init__",
        "type_comments": [
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, str, function, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 52
            },
            {
                "type": "(_pytest.config.Config::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str, method, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_hooks.py",
        "line": 707,
        "func_name": "HookSpec.__init__",
        "type_comments": [
            {
                "type": "(module, str, Dict[str => Optional[bool]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 20
            },
            {
                "type": "(module, str, Dict[str => Optional[Union[bool/pytest.PytestRemovedIn8Warning::UserWarning]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(module, str, Dict[str => bool]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 29
            }
        ],
        "samples": 50
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 65,
        "func_name": "DistFacade.__init__",
        "type_comments": [
            {
                "type": "(importlib.metadata.PathDistribution) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 68,
        "func_name": "project_name",
        "type_comments": [
            {
                "type": "() -> str",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 73,
        "func_name": "DistFacade.__getattr__",
        "type_comments": [
            {
                "type": "(str, None) -> importlib.metadata._adapters.Message",
                "samples": 2
            },
            {
                "type": "(str, None) -> str",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 97,
        "func_name": "PluginManager.__init__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 111,
        "func_name": "PluginManager._hookexec",
        "type_comments": [
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.config.argparsing.Parser::object]], bool) -> List",
                "samples": 15
            },
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List, Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]], bool) -> List",
                "samples": 11
            },
            {
                "type": "(str, List, Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => _pytest.config.PytestPluginManager::pluggy._manager.PluginManager], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.Config::object/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> List",
                "samples": 2
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/module]], bool) -> List",
                "samples": 26
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[List[str]/_pytest.config.PytestPluginManager::pluggy._manager.PluginManager]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.main.Session::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest._py.path.LocalPath::object/_pytest.main.Session::object/pathlib.PosixPath]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Module::object/function/str]], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[List[_pytest.python.Function::object]/_pytest._py.path.LocalPath::object/_pytest.config.Config::object/pathlib.PosixPath]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[Tuple[str/int/str]/str]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Function::object/_pytest.reports.TestReport::object/_pytest.runner.CallInfo::typing.Generic]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => _pytest.reports.TestReport::object], bool) -> pyannotate_runtime.collect_types.UnknownType",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.config.PytestPluginManager::pluggy._manager.PluginManager/_pytest.logging.LoggingPlugin::object]], bool) -> List",
                "samples": 1
            },
            {
                "type": "(str, List[pluggy._hooks.HookImpl], Dict[str => Union[_pytest.python.Function::object/_pytest.runner.CallInfo::typing.Generic]], bool) -> _pytest.reports.TestReport::object",
                "samples": 1
            }
        ],
        "samples": 68
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 122,
        "func_name": "PluginManager.register",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.capture.CaptureManager::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, None) -> str",
                "samples": 1
            },
            {
                "type": "(module, str) -> str",
                "samples": 33
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.cacheprovider.NFPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, None) -> str",
                "samples": 1
            },
            {
                "type": "(type, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.main.Session::object, str) -> str",
                "samples": 1
            }
        ],
        "samples": 44
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 173,
        "func_name": "PluginManager.parse_hookimpl_opts",
        "type_comments": [
            {
                "type": "(module, str) -> Dict[str => bool]",
                "samples": 52
            },
            {
                "type": "(_pytest.config.Config::object, str) -> Dict[str => bool]",
                "samples": 3
            },
            {
                "type": "(_pytest.cacheprovider.LFPlugin::object, str) -> Dict[str => bool]",
                "samples": 1
            },
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object, str) -> Dict[str => bool]",
                "samples": 1
            },
            {
                "type": "(_pytest.logging.LoggingPlugin::object, str) -> Dict[str => bool]",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager, str) -> None",
                "samples": 1
            },
            {
                "type": "(module, str) -> None",
                "samples": 52
            },
            {
                "type": "(_pytest.config.Config::object, str) -> None",
                "samples": 3
            },
            {
                "type": "(_pytest.terminal.TerminalReporter::object, str) -> None",
                "samples": 1
            },
            {
                "type": "(_pytest.fixtures.FixtureManager::object, str) -> None",
                "samples": 1
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 235,
        "func_name": "PluginManager.is_blocked",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 33
            }
        ],
        "samples": 33
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 249,
        "func_name": "PluginManager.add_hookspecs",
        "type_comments": [
            {
                "type": "(module) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 275,
        "func_name": "PluginManager.parse_hookspec_opts",
        "type_comments": [
            {
                "type": "(module, str) -> None",
                "samples": 52
            },
            {
                "type": "(module, str) -> Dict[str => Optional[Union[bool/pytest.PytestRemovedIn8Warning::UserWarning]]]",
                "samples": 52
            },
            {
                "type": "(module, str) -> Dict[str => Optional[bool]]",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 301,
        "func_name": "PluginManager.get_canonical_name",
        "type_comments": [
            {
                "type": "(pytest_timeouts.TimeoutsPlugin::object) -> str",
                "samples": 1
            },
            {
                "type": "(_pytest.config.PytestPluginManager::pluggy._manager.PluginManager) -> str",
                "samples": 1
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 312,
        "func_name": "PluginManager.get_plugin",
        "type_comments": [
            {
                "type": "(str) -> None",
                "samples": 52
            }
        ],
        "samples": 52
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 316,
        "func_name": "PluginManager.has_plugin",
        "type_comments": [
            {
                "type": "(str) -> bool",
                "samples": 2
            }
        ],
        "samples": 2
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 328,
        "func_name": "PluginManager._verify_hook",
        "type_comments": [
            {
                "type": "(pluggy._hooks.HookCaller, pluggy._hooks.HookImpl) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 61
            }
        ],
        "samples": 61
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 376,
        "func_name": "PluginManager.check_pending",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 392,
        "func_name": "PluginManager.load_setuptools_entrypoints",
        "type_comments": [
            {
                "type": "(str, None) -> int",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_manager.py",
        "line": 422,
        "func_name": "PluginManager.list_plugin_distinfo",
        "type_comments": [
            {
                "type": "() -> List[Tuple[module/pluggy._manager.DistFacade]]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_result.py",
        "line": 31,
        "func_name": "Result.__init__",
        "type_comments": [
            {
                "type": "(_pytest.reports.TestReport::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 8
            },
            {
                "type": "(List, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 21
            },
            {
                "type": "(_pytest.reports.CollectReport::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 2
            },
            {
                "type": "(_pytest.config.Config::object, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(None, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(None, TypeError) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 13
            },
            {
                "type": "(bool, None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 5
            }
        ],
        "samples": 53
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_result.py",
        "line": 42,
        "func_name": "excinfo",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_result.py",
        "line": 91,
        "func_name": "Result.get_result",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 55
            },
            {
                "type": "() -> bool",
                "samples": 55
            },
            {
                "type": "() -> List",
                "samples": 55
            },
            {
                "type": "() -> None",
                "samples": 55
            },
            {
                "type": "() -> _pytest.config.Config::object",
                "samples": 55
            },
            {
                "type": "() -> _pytest.reports.CollectReport::object",
                "samples": 55
            },
            {
                "type": "() -> _pytest.reports.TestReport::object",
                "samples": 55
            }
        ],
        "samples": 55
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 17,
        "func_name": "TagTracer.__init__",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 22,
        "func_name": "TagTracer.get",
        "type_comments": [
            {
                "type": "(str) -> pluggy._tracing.TagTracerSub",
                "samples": 4
            }
        ],
        "samples": 4
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 42,
        "func_name": "TagTracer._processmessage",
        "type_comments": [
            {
                "type": "(Tuple[str], Tuple[str/int/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(Tuple[str], Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 40
            },
            {
                "type": "(Tuple[str], Tuple[str/Tuple[pathlib.PosixPath/List[str]]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(Tuple[str], Tuple[str/_pytest.main.Session::object/List[str]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            },
            {
                "type": "(Tuple[str], Tuple[str/List[_pytest.python.Module::object]/List[str]]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(Tuple[str], Tuple[str/_pytest.python.Function::object]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            }
        ],
        "samples": 59
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 64,
        "func_name": "TagTracerSub.__init__",
        "type_comments": [
            {
                "type": "(pluggy._tracing.TagTracer, Tuple[str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 4
            },
            {
                "type": "(pluggy._tracing.TagTracer, Tuple[str/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 5
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 68,
        "func_name": "TagTracerSub.__call__",
        "type_comments": [
            {
                "type": "(*Union[int/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(*Union[List[_pytest.python.Module::object]/List[str]/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(*Union[Tuple[pathlib.PosixPath/List[str]]/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(*str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 40
            },
            {
                "type": "(*Union[_pytest.python.Function::object/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 3
            },
            {
                "type": "(*Union[List[str]/_pytest.main.Session::object/str]) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 59
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pluggy/_tracing.py",
        "line": 71,
        "func_name": "TagTracerSub.get",
        "type_comments": [
            {
                "type": "(str) -> pluggy._tracing.TagTracerSub",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest/__init__.py",
        "line": 165,
        "func_name": "__getattr__",
        "type_comments": [
            {
                "type": "(str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 13
            }
        ],
        "samples": 13
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 21,
        "func_name": "get_markers_new_way",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str) -> generator",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 26,
        "func_name": "pytest_addoption",
        "type_comments": [
            {
                "type": "(_pytest.config.argparsing.Parser::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 55,
        "func_name": "pytest_configure",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 62,
        "func_name": "TimeoutsPlugin",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 63,
        "func_name": "TimeoutsPlugin.__init__",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 89,
        "func_name": "parse_timeout",
        "type_comments": [
            {
                "type": "(float) -> float",
                "samples": 4
            },
            {
                "type": "(None) -> float",
                "samples": 8
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 98,
        "func_name": "configure",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 106,
        "func_name": "fetch_timeout_from_config",
        "type_comments": [
            {
                "type": "(str, _pytest.config.Config::object) -> Tuple[float/str]",
                "samples": 3
            },
            {
                "type": "(str, _pytest.config.Config::object) -> Tuple[None/str]",
                "samples": 3
            }
        ],
        "samples": 3
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 112,
        "func_name": "fetch_timeout_order",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 128,
        "func_name": "TimeoutsPlugin.fetch_timeout",
        "type_comments": [
            {
                "type": "(str, _pytest.python.Function::object) -> float",
                "samples": 9
            },
            {
                "type": "(str, None) -> float",
                "samples": 3
            }
        ],
        "samples": 12
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 147,
        "func_name": "TimeoutsPlugin.pytest_report_header",
        "type_comments": [
            {
                "type": "(_pytest.config.Config::object) -> List[str]",
                "samples": 1
            }
        ],
        "samples": 1
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 163,
        "func_name": "TimeoutsPlugin.pytest_runtest_setup",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 169,
        "func_name": "TimeoutsPlugin.pytest_runtest_call",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 175,
        "func_name": "fetch_marker_timeout",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object, str) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 195,
        "func_name": "TimeoutsPlugin.pytest_runtest_teardown",
        "type_comments": [
            {
                "type": "(_pytest.python.Function::object) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 6
            },
            {
                "type": "(_pytest.python.Function::object) -> Iterator",
                "samples": 6
            }
        ],
        "samples": 6
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 201,
        "func_name": "setup_timer",
        "type_comments": [
            {
                "type": "(float) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/pytest_timeouts.py",
        "line": 207,
        "func_name": "cancel_timer",
        "type_comments": [
            {
                "type": "() -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 9
            }
        ],
        "samples": 9
    },
    {
        "path": "venv-erc/lib/python3.12/site-packages/six.py",
        "line": 194,
        "func_name": "_SixMetaPathImporter.find_spec",
        "type_comments": [
            {
                "type": "(str, List[str], None) -> pyannotate_runtime.collect_types.NoReturnType",
                "samples": 1
            }
        ],
        "samples": 1
    }
]