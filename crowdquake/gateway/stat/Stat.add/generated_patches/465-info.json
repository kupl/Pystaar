{
    "patchType": "return",
    "patchValue": "str",
    "neg_args": {
        "self._window_bytes": [
            "int"
        ]
    },
    "node": "from collections import deque\nfrom typing import Callable, Optional\nimport time\nfrom loguru import logger\nimport numpy as np\n\nclass Stat:\n\n    def __init__(self, num_window_size: int, sampling: int=1, reporting_interval_sec: int=5, on_report: Optional[Callable]=None):\n        self._reporting_interval_sec = reporting_interval_sec\n        self._window_latencies = deque(maxlen=num_window_size)\n        self._sampling = sampling\n        self._window_start = time.time()\n        self._window_ind = 0\n        self._window_max_latency = 0\n        self._window_total_latency = 0\n        self._window_bytes = 0\n        self._window_count = 0\n        self._on_report = on_report\n\n    def reset_window(self):\n        self._window_start = time.time()\n        self._window_max_latency = 0\n        self._window_total_latency = 0\n        self._window_bytes = 0\n        self._window_count = 0\n\n    @property\n    def window_max_latency(self) -> int:\n        return self._window_max_latency\n\n    @window_max_latency.setter\n    def window_max_latency(self, latency) -> None:\n        self._window_max_latency = max(self._window_max_latency, latency)\n\n    def add(self, iteration: int, latency: float, msg_length: int):\n        if iteration % self._sampling == 0:\n            self._window_latencies.append(latency)\n        if isinstance(self._window_bytes, int):'<pyfix_template>'\n        self.window_max_latency = latency\n        self._window_total_latency += latency\n        self._window_count += 1\n        self._window_bytes += msg_length\n        if time.time() - self._window_start >= self._reporting_interval_sec:\n            self.print_window()\n            self.reset_window()\n\n    def print_window(self):\n        window = np.asarray(self._window_latencies)\n        elapsed = time.time() - self._window_start\n        q = np.percentile(window, [50, 75, 90, 99, 99.9])\n        stats = {'produced_msg_cnt': self._window_count, 'elapsed_sec': f'{elapsed:.4f}', 'max_latency_sec': f'{self._window_max_latency:.4f}', 'mean_latency_sec': f'{self._window_total_latency / self._window_count:.4f}', 'bytes_produced': f'{self._window_bytes / 1024 / 1024 / elapsed:.4f} MB/sec', 'percentiles': {'50p': f'{q[0]:.4f}', '75p': f'{q[1]:.4f}', '90p': f'{q[2]:.4f}', '99p': f'{q[3]:.4f}', '99.9p': f'{q[4]:.4f}'}}\n        logger.info('Windowed stat:\\n{stats}', stats=stats)\n        if self._on_report:\n            self._on_report(stats)",
    "filename": "/home/neta/erc-group2-framework/example/crowdquake/gateway/stat/src/gateway/core/stat.py"
}